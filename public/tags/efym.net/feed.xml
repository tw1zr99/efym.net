<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>efym.net</title>
	<link>http://efym.net/tags/efym.net/</link>
	<description>Recent content on efym.net</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-us</language>
	<lastBuildDate>Fri, 14 May 2021 17:03:06 +0100</lastBuildDate>
    
        <atom:link href="http://efym.net/tags/efym.net/feed.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>How I manage this website</title>
		<link>http://efym.net/blog/how-manage-this-website/</link>
		<pubDate>Fri, 29 Oct 2021 11:16:10 +0100</pubDate>
		
		<guid>http://efym.net/blog/how-manage-this-website/</guid>
		<description>&lt;p&gt;Run-down of the process and tools I use to keep efym.net running.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;date&#34;&gt;August 25, 2022&lt;/p&gt;
&lt;h2 style=&#34;color: #a23333; text-decoration: none; margin-top:0; text-shadow: 1px 1px #000;&#34;&gt;Update:&lt;/h2&gt;
I no longer edit and deploy this website using this script, the post will remain around for archiving purposes.&lt;br&gt;
&lt;b&gt;efym.net&lt;/b&gt; is currently built using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.

&lt;hr&gt;
&lt;h2 id=&#34;static-site-generation&#34;&gt;Static site generation&lt;/h2&gt;
&lt;p&gt;Back when I was around 10 years old one of my older cousins showed me how to make very simple web pages by writing the &lt;strong&gt;html&lt;/strong&gt; tags directly into a file with notepad. Now many years later I still write my own &lt;strong&gt;html&lt;/strong&gt; code instead of using frameworks, all I need is &lt;strong&gt;vim&lt;/strong&gt; to make a website; granted it wouldn&amp;rsquo;t be anywhere near as fancy of something produced with &lt;strong&gt;Wordpress&lt;/strong&gt; or &lt;strong&gt;Joomla&lt;/strong&gt; but to me that&amp;rsquo;s a plus. I despise how bloated the modern web is which is why my website is kept intentionally simple.&lt;/p&gt;
&lt;p&gt;All that being said, it would be a major pain in the ass and totally unnecesary to write every single web page from scratch by hand, so when I first created &lt;strong&gt;efym.net&lt;/strong&gt; I looked around to make a choice about which static site generator I was going to use. Very much to my surprise I found &lt;strong&gt;ssg&lt;/strong&gt;, a very simple script written in &lt;strong&gt;bash&lt;/strong&gt; which does something very close to what I wanted: it takes a header and a footer file and wraps every other file in the designated directory with them. There are a couple other things it does but none of them really concern me. No bloat, no JavaScript, no themes, etc.&lt;/p&gt;
&lt;p&gt;It supports &lt;strong&gt;markdown&lt;/strong&gt; to &lt;strong&gt;html&lt;/strong&gt; conversion too, so if one was inclined to write the pages in markdown one could do that. All you need to do to run it is make a couple of directories, one with source files and one which acts as the destination one, this last directory&amp;rsquo;s content is ready to be put in your web server.&lt;/p&gt;
&lt;p&gt;There are detailed instructions on &lt;strong&gt;ssg&lt;/strong&gt;&amp;rsquo;s website, which you can visit at:&lt;br&gt;
&lt;a href=&#34;https://www.romanzolotarev.com/ssg.html&#34;&gt;https://www.romanzolotarev.com/ssg.html&lt;/a&gt;&lt;br&gt;
But as an example this is what I would run to generate the website files for the first time or after modifying something:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssg6 src dst &amp;#34;efym&amp;#34; &amp;#34;https://efym.net&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before I &lt;strong&gt;rsync&lt;/strong&gt; the &lt;strong&gt;dst&lt;/strong&gt; directory to the server which hosts my website I like to check everything is looking the way I want it, so I host a simple &lt;strong&gt;http&lt;/strong&gt; server with a &lt;strong&gt;Python&lt;/strong&gt; module right from the computer I&amp;rsquo;m working on for testing purposes, this can be achieved by changing into the &lt;strong&gt;dst&lt;/strong&gt; directory and issuing the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python -m http.server 8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then just open any web browser and point the url to &lt;strong&gt;localhost:8080&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;deployment-script&#34;&gt;Deployment script&lt;/h2&gt;
&lt;p&gt;As good as &lt;strong&gt;ssg&lt;/strong&gt; is as a static site generator, it&amp;rsquo;s still missing some very specific things, I wanted a &amp;ldquo;Recent articles&amp;rdquo; section at the bottom of the &lt;strong&gt;index.html&lt;/strong&gt; page which automatically selected the most recent 2-3 blog posts I&amp;rsquo;d written and displayed links to them. I also wanted the &lt;strong&gt;blogindex.html&lt;/strong&gt; page to be generated with entries linking to every blog post inside the &lt;strong&gt;blog&lt;/strong&gt; directory. So in order to not have to add and change these entries manually everytime I write a new blog post, I wrote a wrapper script to take care of it, here is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat deploy-site&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

[[ -f ./deploy-site ]] || exit 1

posts=$(grep -m1 the_index src/blog/*.html | sort -g -r -k2 -t = | cut -d\: -f1 | cut -d\/ -f3)
posts_recents=$(grep -m1 the_index src/blog/*.html | sort -g -r -k2 -t = | cut -d\: -f1 | cut -d\/ -f3 | head -n3)

# generate/update blog entries in blogindex.html
echo &amp;#34;&amp;lt;center&amp;gt;&amp;lt;a href=&amp;#39;/feed&amp;#39; type=&amp;#39;application/rss+xml&amp;#39;&amp;gt;&amp;lt;img class=&amp;#39;icon&amp;#39; src=&amp;#39;/img/rss_icon.png&amp;#39;&amp;gt; RSS feed&amp;lt;/a&amp;gt;&amp;lt;/center&amp;gt;&amp;#34; &amp;gt; src/blogindex.html
for post in ${posts}; do
	title=$(grep &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*h1&amp;gt;||g&amp;#39;)
	desc=$(grep &amp;#39;&amp;lt;p class=&amp;#34;desc&amp;#34;&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*p&amp;gt;||g&amp;#39; | sed &amp;#39;s|&amp;lt;p class=&amp;#34;desc&amp;#34;&amp;gt;||g&amp;#39;)
	datt=$(grep &amp;#39;&amp;lt;p class=&amp;#34;date&amp;#34;&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*p&amp;gt;||g&amp;#39; | sed &amp;#39;s|&amp;lt;p class=&amp;#34;date&amp;#34;&amp;gt;||g&amp;#39;)
	echo &amp;#34;&amp;lt;p class=&amp;#34;date&amp;#34;&amp;gt;$datt&amp;lt;/p&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/blogindex.html
	echo &amp;#34;&amp;lt;a href=&amp;#34;blog/${post}&amp;#34;&amp;gt;$title&amp;lt;/a&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/blogindex.html
	echo &amp;#34;&amp;lt;p class=&amp;#34;desc&amp;#34;&amp;gt;$desc&amp;lt;/p&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/blogindex.html
	echo &amp;#34;&amp;lt;hr&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/blogindex.html
done

# generate/update rss feed
echo &amp;#34;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&amp;#34; &amp;gt; src/feed
echo &amp;#34;&amp;lt;rss version=&amp;#39;2.0&amp;#39;&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
echo &amp;#34;&amp;lt;channel&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
echo &amp;#34;&amp;lt;title&amp;gt;efym.net&amp;lt;/title&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
echo &amp;#34;&amp;lt;description&amp;gt;you can&amp;#39;t escape from your mind&amp;lt;/description&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
echo &amp;#34;&amp;lt;link&amp;gt;https://efym.net&amp;lt;/link&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
for post in ${posts}; do
	title=$(grep &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*h1&amp;gt;||g&amp;#39;)
	desc=$(grep &amp;#39;&amp;lt;p class=&amp;#34;desc&amp;#34;&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*p&amp;gt;||g&amp;#39; | sed &amp;#39;s|&amp;lt;p class=&amp;#34;desc&amp;#34;&amp;gt;||g&amp;#39;)
	datt=$(grep &amp;#39;&amp;lt;p class=&amp;#34;date&amp;#34;&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*p&amp;gt;||g&amp;#39; | sed &amp;#39;s|&amp;lt;p class=&amp;#34;date&amp;#34;&amp;gt;||g&amp;#39;)
	rssdatt=$(date -R --date=&amp;#34;$datt&amp;#34;)
	echo &amp;#34;&amp;lt;item&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;guid&amp;gt;https://efym.net/blog/$post&amp;lt;/guid&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;link&amp;gt;https://efym.net/blog/$post&amp;lt;/link&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;pubDate&amp;gt;$rssdatt&amp;lt;/pubDate&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;title&amp;gt;$title&amp;lt;/title&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;description&amp;gt;$desc&amp;lt;/description&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
	echo &amp;#34;&amp;lt;/item&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
done
echo &amp;#34;&amp;lt;/channel&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed
echo &amp;#34;&amp;lt;/rss&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/feed

# updates &amp;#34;recent articles&amp;#34; list of blog entries in index.html
sed -i &amp;#39;1,/the_recents/!d&amp;#39; src/index.html
for post in ${posts_recents}; do
	title=$(grep &amp;#39;&amp;lt;h1&amp;gt;&amp;#39; src/blog/$post | sed &amp;#39;s|&amp;lt;/*h1&amp;gt;||g&amp;#39;)
	echo &amp;#34;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#39;/blog/${post}&amp;#39;&amp;gt;$title&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/index.html
done
echo &amp;#34;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/index.html
echo &amp;#34;&amp;lt;a href=&amp;#39;/feed&amp;#39; type=&amp;#39;application/rss+xml&amp;#39;&amp;gt;&amp;lt;img class=&amp;#39;icon&amp;#39; src=&amp;#39;/img/rss_icon.png&amp;#39;&amp;gt; RSS feed&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/index.html
echo &amp;#34;&amp;lt;/ul&amp;gt;&amp;#34; &amp;gt;&amp;gt; src/index.html

# ssg6 rebuild static pages
rm dst/.files
ssg6 src dst &amp;#34;efym&amp;#34; &amp;#34;https://efym.net&amp;#34;

# rsync everything to efym server
read -r -p &amp;#34;deploy to efym.net server? [y/N] &amp;#34; input
case $input in
	[yY][eE][sS]|[yY]) rsync -avhP --delete --chown=www-data:www-data ./dst/ root@efym.net:/var/www/efym.net/ ;;
	*) echo &amp;#34;not deploying&amp;#34; ;;
esac
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The script has comments at the beginning of each section, so it should be fairly easy to identify exactly how I accomplish the tasks mentioned before (provided the reader is familiar with &lt;strong&gt;bash&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Another thing I wanted to have automatically generated based on the current available posts is an &lt;strong&gt;RSS&lt;/strong&gt; feed. I personally use &lt;strong&gt;RSS&lt;/strong&gt; all the time to keep up with various news, videos, etc. I think &lt;strong&gt;RSS&lt;/strong&gt; is very understimated nowadays but since I use it I wanted my site to prioritize it. So the &lt;strong&gt;deploy-site&lt;/strong&gt; wrapper script also generates an &lt;strong&gt;RSS&lt;/strong&gt; feed and adds links to it at the top of the &lt;strong&gt;blogindex.html&lt;/strong&gt; page and in the &amp;ldquo;Recent articles&amp;rdquo; section in the &lt;strong&gt;index.html&lt;/strong&gt; page.&lt;br&gt;
The &lt;strong&gt;RSS&lt;/strong&gt; feed links point here: &lt;a href=&#34;http://efym.net/feed&#34;&gt;https://efym.net/feed&lt;/a&gt; and can be accessed with any available client.&lt;/p&gt;
&lt;p&gt;After all those things are done, the script rebuilds the site files using &lt;strong&gt;ssg&lt;/strong&gt; then prompts me whether I&amp;rsquo;d like to &lt;strong&gt;rsync&lt;/strong&gt; the &lt;strong&gt;dst&lt;/strong&gt; directory straight to the server hosting the website on the Internet, usually I&amp;rsquo;ll run the script many times before I actually upload the work I&amp;rsquo;ve done.&lt;/p&gt;
&lt;p&gt;I also keep all of these files in a &lt;strong&gt;git&lt;/strong&gt; repository on my &lt;strong&gt;Gitea&lt;/strong&gt; instance: &lt;a href=&#34;https://gitea.efym.net/tw1zr/efym.net-ssg&#34;&gt;gitea.efym.net/efym.net-ssg&lt;/a&gt; feel free to browse, everything is Free Software under the &lt;strong&gt;GPLv3&lt;/strong&gt; license.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Appalling Anysoftkeyboard Feature</title>
		<link>http://efym.net/blog/appalling-anysoftkeyboard-feature/</link>
		<pubDate>Wed, 13 Oct 2021 12:54:02 +0100</pubDate>
		
		<guid>http://efym.net/blog/appalling-anysoftkeyboard-feature/</guid>
		<description>&lt;p&gt;When developers turn their software into a propaganda tool.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First off let me clarify that the word &amp;ldquo;feature&amp;rdquo; in this post&amp;rsquo;s title is being used extremely sarcastically; I&amp;rsquo;m not one to stress much about mobile phones, I&amp;rsquo;m not a huge fan of them and use them very sparingly but I still own one. It runs &lt;a href=&#34;https://lineageos.org&#34;&gt;LineageOS&lt;/a&gt; and every single application installed on it was downloaded from &lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid&lt;/a&gt;, so no proprietary software at all in userland.&lt;/p&gt;
&lt;p&gt;For approximately four years I&amp;rsquo;ve been using AnySoftKeyboard as the keyboard software and I&amp;rsquo;ve been very happy with it, the features are good, the customization is good and the multiple language support—which I use a lot—is also good. I&amp;rsquo;ve recommended it to many people plenty of times.&lt;/p&gt;
&lt;p&gt;Nearly two years ago when the COVID-19 ordeal began to cause worldwide concern the developers of the aforementioned keyboard application chose to push an update which included a link on the keyboard&amp;rsquo;s suggestion bar to the website of some health organization with the text: &amp;ldquo;&lt;strong&gt;Keep safe! Click for info on CoronaVirus.&lt;/strong&gt;&amp;rdquo;&lt;br&gt;
Afer a few seconds the link dissapeared along with its icon and text.&lt;/p&gt;
&lt;p&gt;I found the decision to include this on a keyboard application slightly puzzling, but since it was a one time thing and I never saw it again I disregarded it and actually even forgot that it had happened until recently.&lt;/p&gt;
&lt;p&gt;It wasn&amp;rsquo;t until the latest update when it became unacceptable for me.&lt;br&gt;
Here&amp;rsquo;s what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/appalling-anysoftkeyboard-feature/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first thing I did after this thing popped on my screen a second time was to go to the project&amp;rsquo;s Github page, the application is open source after all. Not at all to my surprise I found other people were already complaining, &lt;a href=&#34;https://github.com/AnySoftKeyboard/AnySoftKeyboard/issues/2914&#34;&gt;this&lt;/a&gt; specific issue was the one which shed the most light on the situation.&lt;br&gt;
In case you can&amp;rsquo;t be bothered to follow that link and read the entire discussion, here&amp;rsquo;s a screenshot of what one of the lead developers said:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/appalling-anysoftkeyboard-feature/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The last time I updated the application it would display the link permanently, the text disappeared after two seconds but the icon containing the link would not. It is said in this Github issue that after some use of the keyboard the link would disappear completely, I used it for a few more hours and it didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not even going to get into what I personally think about the virus because my thoughts on the subject are not particularly relevant to the point I&amp;rsquo;m trying to make. The problem is that the developers of the application are choosing to use your keyboard to display something other than keys; very uselessly I might add since information about COVID-19 is readily available in literally millions of websites around the Internet, I find this behaviour to be excrutiatingly propagandistic and I will not tolerate it.&lt;/p&gt;
&lt;p&gt;So I went ahead and uninstalled AnySoftKeyboard for good.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a shame, really. Because I liked it and I still think it&amp;rsquo;s a well coded piece of software with well implemented features, but I won&amp;rsquo;t stand to support the work of people who try to shove what they consider to be a &amp;ldquo;public safety issue&amp;rdquo; down my throat.&lt;/p&gt;
&lt;p&gt;For the past few days I&amp;rsquo;ve been using &lt;a href=&#34;https://f-droid.org/en/packages/org.dslul.openboard.inputmethod.latin&#34;&gt;OpenBoard&lt;/a&gt; and it gets the job done, the layout is slightly less convenient as you can see in the pictures below (or maybe I&amp;rsquo;m just used to something different) but I&amp;rsquo;d very much rather a slight inconvenience while typing on my phone than having a constant reminder in my face about this years&amp;rsquo; flu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/appalling-anysoftkeyboard-feature/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I would urge every software developer who might read this to please keep your application&amp;rsquo;s functionality focused on what you actually built it to do and do not use whatever platform you may have to push your social/political/economic/etc agenda unto your users.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 08 | NFS</title>
		<link>http://efym.net/blog/sysadmin-playground08-nfs/</link>
		<pubDate>Tue, 28 Sep 2021 08:12:26 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground08-nfs/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;nfs-server&#34;&gt;NFS server&lt;/h2&gt;
&lt;p&gt;Through the &lt;strong&gt;LDAP&lt;/strong&gt; server we deployed previously we have achieved a centralized authentication management, to compliment that I think it&amp;rsquo;s pertinent that the &lt;code&gt;/home&lt;/code&gt; directory is centralized too, in a way that every virtual machine has it as a mount-point directed to a file server located at &lt;strong&gt;tyule.pygrn.lab&lt;/strong&gt;, instead of each box having a local directory for it separate from the other boxes.&lt;/p&gt;
&lt;p&gt;There are many protocols and network filesystems that would help us create this type of centralized storage, in this chapter we&amp;rsquo;re going to be using &lt;strong&gt;NFS&lt;/strong&gt; which is one of the more widespread services used to accomplish our objective.&lt;/p&gt;
&lt;p&gt;One of the problem with &lt;strong&gt;NFS&lt;/strong&gt; is that it doesn&amp;rsquo;t support &lt;strong&gt;TLS&lt;/strong&gt; encryption (or any other form of encryption) natively. Anyone sniffing the network could grab the packets in-transit; a standard &lt;strong&gt;NFS&lt;/strong&gt; connection looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;But we&amp;rsquo;re going to get around that by creating a tunnel with &lt;a href=&#34;https://www.stunnel.org&#34;&gt;stunnel&lt;/a&gt; through which the connection between the &lt;strong&gt;NFS&lt;/strong&gt; client and the server will flow; it&amp;rsquo;ll be more like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We will also encrypt the partition which will hold the filesystem that hosts the &lt;strong&gt;NFS&lt;/strong&gt; export with &lt;strong&gt;luks&lt;/strong&gt; to protect our users&amp;rsquo; data at rest.&lt;/p&gt;
&lt;p&gt;We won&amp;rsquo;t be using containers to deploy this, we&amp;rsquo;ll install the packages directly on the virtual machines because the idea is for every machine to share the same &lt;strong&gt;/home&lt;/strong&gt; directory, so using containers would add an unnecesary layer of complexity which would barely grant any reproducible benefit.&lt;br&gt;
We&amp;rsquo;re still going to use &lt;strong&gt;Ansible&lt;/strong&gt; for the deployment though. We&amp;rsquo;ll also need to create a certificate with &lt;strong&gt;certstrap&lt;/strong&gt; (or any tool you&amp;rsquo;ve been using to manage the CA) so go do that now and copy it to the &lt;code&gt;files/CA&lt;/code&gt; directory; this time it needs to be in &lt;strong&gt;pem&lt;/strong&gt; format and the private and public parts will be concatenated on the same file; so we only need: &lt;code&gt;nfs.pem&lt;/code&gt; which will contain both sides of the key.&lt;/p&gt;
&lt;p&gt;First create the keyfile that will be used to encrypt and decrypt the &lt;strong&gt;luks&lt;/strong&gt; container.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ dd if=/dev/urandom bs=32 count=1 of=files/nfs/luks_vdb_keyfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now create an &lt;strong&gt;Ansible&lt;/strong&gt; role called &lt;code&gt;nfs&lt;/code&gt; and its task file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/nfs/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Install nfs server, stunnel and cryptsetup
  apt:
    name: &amp;#34;{{ item }}&amp;#34;
    state: &amp;#34;latest&amp;#34;
    update_cache: &amp;#34;yes&amp;#34;
  with_items:
    - &amp;#34;cryptsetup&amp;#34;
    - &amp;#34;nfs-kernel-server&amp;#34;
    - &amp;#34;stunnel&amp;#34;

- name: Copy luks_vdb_keyfile into /etc/
  copy:
    src: &amp;#34;nfs/luks_vdb_keyfile&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0400&amp;#34;

- name: Encrypt /dev/vdb with luks and open the container
  luks_device:
    device: &amp;#34;/dev/vdb&amp;#34;
    state: &amp;#34;opened&amp;#34;
    keyfile: &amp;#34;/etc/luks_vdb_keyfile&amp;#34;
    name: &amp;#34;homecrypt&amp;#34;
    label: &amp;#34;homecrypt&amp;#34;

- name: Add /dev/mapper/homecrypt to crypttab
  crypttab:
    backing_device: &amp;#34;/dev/vdb&amp;#34;
    name: &amp;#34;/dev/mapper/homecrypt&amp;#34;
    password: &amp;#34;/etc/luks_vdb_keyfile&amp;#34;
    state: &amp;#34;present&amp;#34;

- name: Format /dev/mapper/homecrypt in ext4 if it&amp;#39;s missing a filesystem
  filesystem:
    device: &amp;#34;/dev/mapper/homecrypt&amp;#34;
    fstype: &amp;#34;ext4&amp;#34;
    state: &amp;#34;present&amp;#34;

- name: Add /home mount entry to /etc/fstab
  mount:
    src: &amp;#34;/dev/mapper/homecrypt&amp;#34;
    path: &amp;#34;/home&amp;#34;
    fstype: &amp;#34;ext4&amp;#34;
    state: &amp;#34;mounted&amp;#34;

- name: Edit /etc/exports to include /home share through stunnel
  lineinfile:
    path: &amp;#34;/etc/exports&amp;#34;
    line: &amp;#34;/home 127.0.0.1(fsid=0,rw,sync,anonuid=0,anongid=0,no_subtree_check,insecure)&amp;#34;
    state: &amp;#34;present&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;exportsf&amp;#34;

- name: Re-export nfs shares if /etc/exports file changes
  when: &amp;#34;exportsf.changed&amp;#34;
  command:
    cmd: &amp;#34;exportfs -a&amp;#34;

- name: Copy nfs pem key into /etc/ssl/pygrn.lab/
  copy:
    src: &amp;#34;CA/nfs.pem&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0660&amp;#34;

- name: Copy stunnel server file into /etc/stunnel/
  copy:
    src: &amp;#34;nfs/stunnel/server-nfs_tls.conf&amp;#34;
    dest: &amp;#34;/etc/stunnel/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Copy nfs server systemd socket into /etc/systemd/system/
  copy:
    src: &amp;#34;nfs/systemd/server-nfs_tls.socket&amp;#34;
    dest: &amp;#34;/etc/systemd/system/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Copy nfs server systemd service into /etc/systemd/system/
  copy:
    src: &amp;#34;nfs/systemd/server-nfs_tls@.service&amp;#34;
    dest: &amp;#34;/etc/systemd/system/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Set /var/empty/stunnel for stunnel chroot
  file:
    dest: &amp;#34;/var/empty/stunnel&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Start stunnel systemd socket
  systemd:
    name: &amp;#34;server-nfs_tls.socket&amp;#34;
    state: &amp;#34;started&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That role copies the keyfile to the virtual machine acting as the &lt;strong&gt;NFS&lt;/strong&gt; server which is &lt;strong&gt;tyule&lt;/strong&gt;, encrypts &lt;code&gt;/dev/vdb&lt;/code&gt; with &lt;strong&gt;luks&lt;/strong&gt;, opens the encrypted drive, formats it with ext4 and mounts it at &lt;code&gt;/home&lt;/code&gt;; as well as adds entries to &lt;code&gt;/etc/crypttab&lt;/code&gt; and &lt;code&gt;/etc/fstab&lt;/code&gt; in order to perform these tasks at each reboot.&lt;/p&gt;
&lt;p&gt;The keyfile to unlock &lt;code&gt;/dev/mapper/homecrypt&lt;/code&gt; will be located at &lt;code&gt;/etc/luks_vdb_keyfile&lt;/code&gt; with 0400 ugo permissions, so only &lt;strong&gt;root&lt;/strong&gt; will be able to read it.&lt;/p&gt;
&lt;p&gt;It also sets up &lt;strong&gt;/home&lt;/strong&gt; as an &lt;strong&gt;NFS&lt;/strong&gt; export and puts in place &lt;strong&gt;stunnel&lt;/strong&gt;&amp;rsquo;s configuration file and &lt;strong&gt;systemd&lt;/strong&gt; socket unit. This is the server side of the &lt;strong&gt;NFS&lt;/strong&gt; server.&lt;/p&gt;
&lt;p&gt;Here are the server configuration files being copied to the virtual machines, create them with this content:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/stunnel/server-nfs_tls.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# global
sslVersion      = TLSv1.3
TIMEOUTidle     = 600
renegotiation   = no
FIPS            = no
options         = NO_SSLv2
options         = NO_SSLv3
options         = SINGLE_DH_USE
options         = SINGLE_ECDH_USE
options         = CIPHER_SERVER_PREFERENCE
syslog          = yes
setuid          = nobody
setgid          = nogroup
chroot          = /var/empty/stunnel
libwrap         = yes
service         = server-nfs_tls
curve           = secp521r1
ciphers         = ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

# credentials
verify          = 4
CAfile          = /etc/ssl/pygrn.lab/nfs.pem
cert            = /etc/ssl/pygrn.lab/nfs.pem

# role
connect         = 127.0.0.1:2049
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/systemd/server-nfs_tls.socket&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=NFS over stunnel/TLS server

[Socket]
ListenStream=2363
Accept=yes
TimeoutSec=600

[Install]
WantedBy=sockets.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/systemd/server-nfs_tls@.service&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=NFS over stunnel/TLS server

[Service]
ExecStart=/usr/bin/stunnel /etc/stunnel/server-nfs_tls.conf
StandardInput=socket
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nfs-clients&#34;&gt;NFS Clients&lt;/h2&gt;
&lt;p&gt;Now that we have &lt;strong&gt;tyule&lt;/strong&gt; serving its &lt;code&gt;/home&lt;/code&gt; directory through &lt;strong&gt;NFS&lt;/strong&gt; let&amp;rsquo;s reconfigure every other virtual machine to mount that &lt;strong&gt;NFS&lt;/strong&gt; export as their own &lt;code&gt;/home&lt;/code&gt; directory. Create another &lt;strong&gt;Ansible&lt;/strong&gt; role called &lt;code&gt;nfs-client&lt;/code&gt; and its task file looking like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/nfs-client/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Install nfs-common and stunnel
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  apt:
    name: &amp;#34;{{ item }}&amp;#34;
    state: &amp;#34;latest&amp;#34;
    update_cache: &amp;#34;yes&amp;#34;
  with_items:
    - &amp;#34;nfs-common&amp;#34;
    - &amp;#34;stunnel&amp;#34;

- name: Copy nfs pem key into /etc/ssl/pygrn.lab/
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  copy:
    src: &amp;#34;CA/nfs.pem&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: 0660

- name: Copy stunnel client file into /etc/stunnel/
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  copy:
    src: &amp;#34;nfs/stunnel/client-nfs_tls.conf&amp;#34;
    dest: &amp;#34;/etc/stunnel/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: 0644

- name: Copy nfs client systemd socket into /etc/systemd/system/
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  copy:
    src: &amp;#34;nfs/systemd/client-nfs_tls.socket&amp;#34;
    dest: &amp;#34;/etc/systemd/system/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: 0644

- name: Copy nfs client systemd service into /etc/systemd/system/
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  copy:
    src: &amp;#34;nfs/systemd/client-nfs_tls@.service&amp;#34;
    dest: &amp;#34;/etc/systemd/system/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: 0644

- name: Set /var/empty/stunnel for stunnel chroot
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  file:
    dest: &amp;#34;/var/empty/stunnel&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Start stunnel systemd socket
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  systemd:
    name: &amp;#34;client-nfs_tls.socket&amp;#34;
    state: &amp;#34;started&amp;#34;

- name: Add and mount /home entry into /etc/fstab pointing at stunnel
  when: &amp;#34;ansible_hostname != nfs_host_short&amp;#34;
  mount:
    src: &amp;#34;localhost:/&amp;#34;
    path: &amp;#34;/home&amp;#34;
    fstype: &amp;#34;nfs&amp;#34;
    state: &amp;#34;mounted&amp;#34;
    opts: &amp;#34;noauto,vers=4.2,proto=tcp,port=2323&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This role copies the client files used to mount the &lt;code&gt;/home&lt;/code&gt; directory for every virtual machine except &lt;strong&gt;tyule&lt;/strong&gt;, actually mounts the &lt;strong&gt;NFS&lt;/strong&gt; export through &lt;strong&gt;stunnel&lt;/strong&gt; and adds an entry to &lt;code&gt;/etc/fstab&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You might wonder why on the last task the source for the &lt;strong&gt;NFS&lt;/strong&gt; share is &lt;strong&gt;localhost:/&lt;/strong&gt; instead of &lt;strong&gt;tyule.pygrn.lab:/home&lt;/strong&gt; and the reason is that we&amp;rsquo;re pointing the mount at our &lt;strong&gt;systemd&lt;/strong&gt; socket which activates the rest of the connections steps to route the traffic through &lt;strong&gt;stunnel&lt;/strong&gt; (see diagram above).&lt;/p&gt;
&lt;p&gt;And these are the client configuration files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/stunnel/client-nfs_tls.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# global
sslVersion      = TLSv1.3
TIMEOUTidle     = 600
renegotiation   = no
FIPS            = no
options         = NO_SSLv2
options         = NO_SSLv3
options         = SINGLE_DH_USE
options         = SINGLE_ECDH_USE
options         = CIPHER_SERVER_PREFERENCE
syslog          = yes
setuid          = nobody
setgid          = nogroup
chroot          = /var/empty/stunnel
libwrap         = yes
service         = client-nfs_tls
curve           = secp521r1
ciphers         = ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

# credentials
verify          = 4
CAfile          = /etc/ssl/pygrn.lab/nfs.pem
cert            = /etc/ssl/pygrn.lab/nfs.pem

# role
client          = yes
connect         = tyule.pygrn.lab:2363
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/systemd/client-nfs_tls.socket&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=NFS over stunnel/TLS client

[Socket]
ListenStream=2323
Accept=yes
TimeoutSec=300

[Install]
WantedBy=sockets.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nfs/systemd/client-nfs_tls@.service&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=NFS over stunnel/TLS client

[Service]
ExecStart=/usr/bin/stunnel /etc/stunnel/client-nfs_tls.conf
StandardInput=socket
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;running-the-playbook-once-more&#34;&gt;Running the playbook once more&lt;/h2&gt;
&lt;p&gt;Review the &lt;code&gt;playbook.yml&lt;/code&gt;, &lt;code&gt;hosts&lt;/code&gt;, and &lt;code&gt;group_vars/all.yml&lt;/code&gt; files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat playbook.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: &amp;#34;Preparation&amp;#34;
  hosts: all
  roles:
    - &amp;#34;global_preparation&amp;#34;

- name: &amp;#34;Syslog-ng Server&amp;#34;
  hosts: log
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;syslog-ng&amp;#34;

- name: &amp;#34;OpenLDAP Server&amp;#34;
  hosts: ldap
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap&amp;#34;

- name: &amp;#34;OpenLDAP Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap-client&amp;#34;

- name: &amp;#34;E-mail Server&amp;#34;
  hosts: email
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;mail&amp;#34;

- name: &amp;#34;E-mail Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;mail-client&amp;#34;

- name: &amp;#34;NFS Server&amp;#34;
  hosts: nfs
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;nfs&amp;#34;

- name: &amp;#34;NFS Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;nfs-client&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat hosts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[log]
rumsi   ansible_host=192.168.122.8   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]

[ldap]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
cutxn   ansible_host=192.168.122.3   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
cutxo   ansible_host=192.168.122.4   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]

[email]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
watts   ansible_host=192.168.122.9   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]

[nfs]
tyule   ansible_host=192.168.122.7   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]

[undefined]
boldh   ansible_host=192.168.122.5   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
grees   ansible_host=192.168.122.6   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat group_vars/all.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# nfs
nfs_host: &amp;#34;tyule.pygrn.lab&amp;#34;
nfs_host_short: &amp;#34;tyule&amp;#34;

# mail
mail_host: &amp;#34;watts.pygrn.lab&amp;#34;
mail_host_short: &amp;#34;watts&amp;#34;
mail_webui_host: &amp;#34;doris.pygrn.lab&amp;#34;
mail_webui_host_short: &amp;#34;doris&amp;#34;

# openldap
ldap_host1: &amp;#34;cutxn.pygrn.lab&amp;#34;
ldap_host1_short: &amp;#34;cutxn&amp;#34;
ldap_host2: &amp;#34;cutxo.pygrn.lab&amp;#34;
ldap_host2_short: &amp;#34;cutxo&amp;#34;
ldap_webui_host: &amp;#34;doris.pygrn.lab&amp;#34;
ldap_webui_host_short: &amp;#34;doris&amp;#34;

ldap_tw1zr_mail: &amp;#34;tw1zr@pygrn.lab&amp;#34;
ldap_guest1_mail: &amp;#34;guest2@pygrn.lab&amp;#34;
ldap_guest2_mail: &amp;#34;guest2@pygrn.lab&amp;#34;

ldap_tw1zr_pass: &amp;#34;fu9F4yzKH3&amp;#34;
ldap_guest1_pass: &amp;#34;Ln9CQMsDZA&amp;#34;
ldap_guest2_pass: &amp;#34;bKwDKP6z57&amp;#34;

ldap_admin_pass: &amp;#34;2hJmj7TFrz&amp;#34;
ldap_config_pass: &amp;#34;bTu5njqLLd&amp;#34;
ldap_readonly_pass: &amp;#34;Drq8nNEG6C&amp;#34;

# logs
syslog_ng_host: &amp;#34;rumsi.pygrn.lab&amp;#34;
syslog_ng_host_short: &amp;#34;rumsi&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the playbook again after adjusting those files and that&amp;rsquo;s it. To test it we can create a test file inside the &lt;code&gt;/home&lt;/code&gt; directory of one machine and see if it&amp;rsquo;s replicated in the others.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 07 | E-mail</title>
		<link>http://efym.net/blog/sysadmin-playground07-email/</link>
		<pubDate>Sun, 26 Sep 2021 17:28:08 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground07-email/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;e-mail-container&#34;&gt;E-mail container&lt;/h2&gt;
&lt;p&gt;Use &lt;strong&gt;certstrap&lt;/strong&gt; to create a certificate, common name should be &lt;strong&gt;mail&lt;/strong&gt;, move it to &lt;code&gt;files/CA&lt;/code&gt; inside the &lt;strong&gt;Ansible&lt;/strong&gt; directory before we begin creating the role.&lt;/p&gt;
&lt;p&gt;There are quite a few different options to deploy a mostly ready e-mail service like &lt;a href=&#34;https://mailcow.email&#34;&gt;mailcow&lt;/a&gt; or &lt;a href=&#34;https://github.com/LukeSmithxyz/emailwiz&#34;&gt;emailwiz&lt;/a&gt;, but I chose to go with &lt;a href=&#34;https://docker-mailserver.github.io/docker-mailserver/edge&#34;&gt;docker-mailserver&lt;/a&gt; for this project because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nearly all of its configuration can be done through environment variables.&lt;/li&gt;
&lt;li&gt;Consolidates very many services under one unique container but gives you the option to use them or not.&lt;/li&gt;
&lt;li&gt;Excellent support for authenticating through &lt;strong&gt;LDAP&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Stores e-mail files in the filesystem instead of a SQL database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s create a new &lt;strong&gt;Ansible&lt;/strong&gt; role called &lt;code&gt;mail&lt;/code&gt; and its tasks file inside:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir -p roles/mail/tasks &amp;amp;&amp;amp; touch roles/mail/tasks/main.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Populate &lt;code&gt;main.yml&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/mail/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Set /srv/mail permissions
  file:
    dest: &amp;#34;/srv/mail&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Mail server container
  docker_container:
    name: &amp;#34;mailserver&amp;#34;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#34;mailserver/docker-mailserver:latest&amp;#34;
    hostname: &amp;#34;{{ ansible_hostname }}.pygrn.lab&amp;#34;
    published_ports:
      - &amp;#34;25:25&amp;#34;
      - &amp;#34;143:143&amp;#34;
      - &amp;#34;587:587&amp;#34;
      - &amp;#34;993:993&amp;#34;
    env:
      ENABLE_SPAMASSASSIN: &amp;#34;0&amp;#34;
      ENABLE_CLAMAV: &amp;#34;0&amp;#34;
      ENABLE_FAIL2BAN: &amp;#34;0&amp;#34;
      ENABLE_AMAVIS: &amp;#34;0&amp;#34;
      ENABLE_POSTGREY: &amp;#34;0&amp;#34;

      ENABLE_LDAP: &amp;#34;1&amp;#34;
      LDAP_START_TLS: &amp;#34;yes&amp;#34;
      LDAP_SERVER_HOST: &amp;#34;ldap://{{ ldap_host1 }} ldap://{{ ldap_host2 }}&amp;#34;
      LDAP_BIND_DN: &amp;#34;cn=admin,dc=pygrn,dc=lab&amp;#34;
      LDAP_BIND_PW: &amp;#34;{{ ldap_admin_pass }}&amp;#34;
      LDAP_SEARCH_BASE: &amp;#34;dc=pygrn,dc=lab&amp;#34;
      LDAP_QUERY_FILTER_DOMAIN: &amp;#34;(mail=*@%s)&amp;#34;
      LDAP_QUERY_FILTER_USER: &amp;#34;(mail=%s)&amp;#34;
      LDAP_QUERY_FILTER_ALIAS: &amp;#34;(|)&amp;#34;
      LDAP_QUERY_FILTER_GROUP: &amp;#34;(|)&amp;#34;
      LDAP_QUERY_FILTER_SENDERS: &amp;#34;(|(mail=%s)(mail=admin@*))&amp;#34;
      SPOOF_PROTECTION: &amp;#34;1&amp;#34;

      DOVECOT_TLS: &amp;#34;yes&amp;#34;
      DOVECOT_PASS_ATTRS: &amp;#34;uid=user,userPassword=password&amp;#34;
      DOVECOT_PASS_FILTER: &amp;#34;(uid=%n)&amp;#34;
      DOVECOT_USER_FILTER: &amp;#34;(uid=%n)&amp;#34;
      DOVECOT_USER_ATTRS: &amp;#34;=home=/var/mail/pygrn.lab/%{ldap:uid},=mail=maildir:~/Maildir,mailUidNumber=uid,mailGidNumber=gid&amp;#34;

      ENABLE_SASLAUTHD: &amp;#34;1&amp;#34;
      SASLAUTHD_LDAP_START_TLS: &amp;#34;yes&amp;#34;
      SASLAUTHD_MECHANISMS: &amp;#34;ldap&amp;#34;
      SASLAUTHD_LDAP_FILTER: &amp;#34;(mail=%U@pygrn.lab)&amp;#34;
      SASLAUTHD_LDAP_TLS_CACERT_FILE: &amp;#34;/tmp/certs/pygrn.lab-CA.crt&amp;#34;

      ONE_DIR: &amp;#34;1&amp;#34;
      DMS_DEBUG: &amp;#34;0&amp;#34;
      PERMIT_DOCKER: &amp;#34;host&amp;#34;
      SSL_TYPE: &amp;#34;manual&amp;#34;
      SSL_CERT_PATH: &amp;#34;/tmp/certs/mail.crt&amp;#34;
      SSL_KEY_PATH: &amp;#34;/tmp/certs/mail.key&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
      - &amp;#34;/srv/mail/mail-conf:/tmp/docker-mailserver&amp;#34;
      - &amp;#34;/srv/mail/mail-data:/var/mail&amp;#34;
      - &amp;#34;/srv/mail/mail-state:/var/mail-state&amp;#34;
      - &amp;#34;/srv/mail/mail-logs:/var/logs/mail&amp;#34;
      - &amp;#34;/srv/mail/certs:/tmp/certs&amp;#34;
  register: &amp;#34;mailcontainerf&amp;#34;

- name: Copy mail public key into /srv/mail/cert/
  copy:
    src: &amp;#34;CA/mail.crt&amp;#34;
    dest: &amp;#34;/srv/mail/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;mailpubf&amp;#34;

- name: Copy mail private key into /srv/mail/certs/
  copy:
    src: &amp;#34;CA/mail.key&amp;#34;
    dest: &amp;#34;/srv/mail/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0600&amp;#34;
  register: &amp;#34;mailprivf&amp;#34;

- name: Copy CA file into /srv/mail/certs/
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/srv/mail/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;pygrncaf&amp;#34;

- name: Copy pygrn.lab-CA.crt to mailserver container
  when: &amp;#34;mailcontainerf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker cp /etc/ssl/pygrn.lab/pygrn.lab-CA.crt mailserver:/usr/local/share/ca-certificates/&amp;#34;

- name: Update mailserver container ca-certificates
  when: &amp;#34;mailcontainerf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker exec mailserver sh -c &amp;#39;update-ca-certificates&amp;#39;&amp;#34;

- name: Restart mailserver container if cert files are added/changed
  when: &amp;#34;pygrncaf.changed or mailpubf.changed or mailprivf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker restart mailserver&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see we have disabled SpamAssassin, ClamAV, Fail2ban, Amavis and Postgrey by issuing a &amp;ldquo;0&amp;rdquo; to their environment variables.&lt;br&gt;
We enabled &lt;strong&gt;LDAP&lt;/strong&gt; authentication through &lt;strong&gt;TLS&lt;/strong&gt; and defined all the necessary parameters to bind to our &lt;strong&gt;LDAP&lt;/strong&gt; server pair; this is done to &lt;strong&gt;Postfix&lt;/strong&gt;, &lt;strong&gt;Dovecot&lt;/strong&gt; and &lt;strong&gt;SASL&lt;/strong&gt; auth mechanism.&lt;br&gt;
The tasks after defining the container copy certificate files into the directories they need to be and reload/restart the container if or when those files are added or changed.&lt;/p&gt;
&lt;p&gt;This e-mail server will let you log into any of the accounts defined in our &lt;strong&gt;LDAP&lt;/strong&gt; server as well as send and receive e-mails, but only inside this network. I do not own the &lt;strong&gt;pygrn.lab&lt;/strong&gt; domain, it probably doesn&amp;rsquo;t even exist but it works for us in this configuration because of the way &lt;strong&gt;DNS&lt;/strong&gt; is being handled for these machines.&lt;/p&gt;
&lt;p&gt;Instead of setting up a fully functioning e-mail server I could just use &lt;strong&gt;Postfix&lt;/strong&gt; to define an &lt;strong&gt;SMTP&lt;/strong&gt; relay to another e-mail server anywhere on the Internet, in fact, the guidelines I&amp;rsquo;m loosely following to create this environment specify just this, an &lt;strong&gt;SMTP&lt;/strong&gt; relay to gmail. But I thought I&amp;rsquo;d take the fuller approach because I intend to keep this e-mail server restricted to this internal network only; I had never configured &lt;strong&gt;LDAP&lt;/strong&gt; authentication for e-mail accounts before; and because fuck Google and all its data-hungry, privacy-violating services.&lt;/p&gt;
&lt;h2 id=&#34;e-mail-web-client&#34;&gt;E-mail web client&lt;/h2&gt;
&lt;p&gt;Now that the server part is configured, let&amp;rsquo;s also deploy a web client to be able to access it. I personally always check my e-mail from the terminal using &lt;strong&gt;Neomutt,&lt;/strong&gt; but that&amp;rsquo;s a user&amp;rsquo;s choice.&lt;/p&gt;
&lt;p&gt;We will use a dockerized implemetation of &lt;a href=&#34;https://hub.docker.com/r/roundcube/roundcubemail&#34;&gt;Roundcube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Append the following lines the end of &lt;strong&gt;roles/mail/tasks/main.yml&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines to append&lt;/strong&gt; to &lt;code&gt;roles/mail/tasks/main.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: Roundcube container
  when: &amp;#34;ansible_hostname == mail_webui_host_short&amp;#34;
  docker_container:
    name: &amp;#34;roundcube&amp;#34;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#34;roundcube/roundcubemail:latest&amp;#34;
    log_driver: &amp;#34;syslog&amp;#34;
    log_options:
      syslog-address: &amp;#34;tcp+tls://{{ syslog_ng_host }}:6514&amp;#34;
      tag: &amp;#34;roundcube&amp;#34;
    published_ports:
      - &amp;#34;8000:80&amp;#34;
    env:
        ROUNDCUBEMAIL_DEFAULT_HOST: &amp;#34;tls://{{ mail_host }}&amp;#34;
        ROUNDCUBEMAIL_SMTP_SERVER: &amp;#34;tls://{{ mail_host }}&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
  register: &amp;#34;roundcubef&amp;#34;

- name: Copy pygrn.lab-CA.crt to Roundcube container
  when: &amp;#34;ansible_hostname == mail_webui_host_short and roundcubef.changed&amp;#34;
  command:
    cmd: &amp;#34;docker cp /etc/ssl/pygrn.lab/pygrn.lab-CA.crt roundcube:/usr/local/share/ca-certificates/&amp;#34;

- name: Update Roundcube container ca-certificates
  when: &amp;#34;ansible_hostname == mail_webui_host_short and roundcubef.changed&amp;#34;
  command:
    cmd: &amp;#34;docker exec roundcube sh -c &amp;#39;update-ca-certificates&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will setup &lt;strong&gt;Roundcube&lt;/strong&gt; pointing at our e-mail server, you can create an &lt;strong&gt;ssh&lt;/strong&gt; tunnel to access it from the browser (refer to previous chapters to do this) after we run the playbook and the containers are deployed.&lt;/p&gt;
&lt;h2 id=&#34;sendemail-a-command-line-utility&#34;&gt;sendEmail, a command line utility&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll also install &lt;strong&gt;sendEmail&lt;/strong&gt;, a command line utility to authenticate to an &lt;strong&gt;SMTP&lt;/strong&gt; server and send e-mails all with one command. This will be useful to perform tests in future chapters when we start setting up e-mail notifications from our monitoring and backup services. But it would also be useful if our users want to send e-mails to each other and only have a terminal available, through &lt;strong&gt;ssh&lt;/strong&gt; for example.&lt;/p&gt;
&lt;p&gt;Create a role called &lt;strong&gt;mail-client&lt;/strong&gt; and its task file just like for the server.&lt;br&gt;
Here&amp;rsquo;s the content of the file:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/mail-client/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Install sendEmail and dependencies
  apt:
    name: &amp;#34;{{ item }}&amp;#34;
    state: latest
    update_cache: yes
  with_items:
      - &amp;#34;libio-socket-ssl-perl&amp;#34;
      - &amp;#34;libnet-ssleay-perl&amp;#34;
      - &amp;#34;sendemail&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;running-the-playbook-and-testing-results&#34;&gt;Running the playbook and testing results&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s have a quick look at the &lt;code&gt;playbook.yml&lt;/code&gt;, &lt;code&gt;hosts&lt;/code&gt; and &lt;code&gt;group_vars/all.yml&lt;/code&gt; files before we run the playbook:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat playbook.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: &amp;#34;Preparation&amp;#34;
  hosts: all
  roles:
    - &amp;#34;global_preparation&amp;#34;

- name: &amp;#34;Syslog-ng Server&amp;#34;
  hosts: log
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;syslog-ng&amp;#34;

- name: &amp;#34;OpenLDAP Server&amp;#34;
  hosts: ldap
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap&amp;#34;

- name: &amp;#34;OpenLDAP Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap-client&amp;#34;

- name: &amp;#34;E-mail Server&amp;#34;
  hosts: email
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;mail&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat hosts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[log]
rumsi   ansible_host=192.168.122.8   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key

[ldap]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxn   ansible_host=192.168.122.3   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxo   ansible_host=192.168.122.4   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key

[mail]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
watts   ansible_host=192.168.122.9   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key

[undefined]
boldh   ansible_host=192.168.122.5   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
grees   ansible_host=192.168.122.6   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
tyule   ansible_host=192.168.122.7   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
rumsi   ansible_host=192.168.122.8   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat group_vars/all.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# logs
syslog_ng_host: &amp;#34;rumsi.pygrn.lab&amp;#34;
syslog_ng_host_short: &amp;#34;rumsi&amp;#34;

# mail
mail_host: &amp;#34;watts.pygrn.lab&amp;#34;
mail_host_short: &amp;#34;watts&amp;#34;
mail_webui_host: &amp;#34;doris.pygrn.lab&amp;#34;
mail_webui_host_short: &amp;#34;doris&amp;#34;

# openldap
ldap_host1: &amp;#34;cutxn.pygrn.lab&amp;#34;
ldap_host1_short: &amp;#34;cutxn&amp;#34;
ldap_host2: &amp;#34;cutxo.pygrn.lab&amp;#34;
ldap_host2_short: &amp;#34;cutxo&amp;#34;
ldap_webui_host: &amp;#34;doris.pygrn.lab&amp;#34;
ldap_webui_host_short: &amp;#34;doris&amp;#34;

ldap_tw1zr_mail: &amp;#34;tw1zr@pygrn.lab&amp;#34;
ldap_guest1_mail: &amp;#34;guest2@pygrn.lab&amp;#34;
ldap_guest2_mail: &amp;#34;guest2@pygrn.lab&amp;#34;

ldap_tw1zr_pass: &amp;#34;fu9F4yzKH3&amp;#34;
ldap_guest1_pass: &amp;#34;Ln9CQMsDZA&amp;#34;
ldap_guest2_pass: &amp;#34;bKwDKP6z57&amp;#34;

ldap_admin_pass: &amp;#34;2hJmj7TFrz&amp;#34;
ldap_config_pass: &amp;#34;bTu5njqLLd&amp;#34;
ldap_readonly_pass: &amp;#34;Drq8nNEG6C&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If everything looks good on those three files run the playbook and give it a couple minutes to finish deploying our new containers:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ansible-playbook playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming everything went well, let&amp;rsquo;s test our new e-mail service.&lt;/p&gt;
&lt;p&gt;Landing screen from the browser:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s login as any of the users in our &lt;strong&gt;LDAP&lt;/strong&gt; server and send an e-mail to any other user to test if everything is working correctly.&lt;/p&gt;
&lt;p&gt;In the following picture I&amp;rsquo;ve logged in as &lt;strong&gt;tw1zr&lt;/strong&gt; and I&amp;rsquo;m sending an e-mail to &lt;strong&gt;guest1&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in this picture I logged in as &lt;strong&gt;guest1&lt;/strong&gt; and we can see the e-mail is received, perfect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;ll use &lt;strong&gt;sendEmail&lt;/strong&gt; to send an e-mail from the command line. Let&amp;rsquo;s authenticate as &lt;strong&gt;guest1&lt;/strong&gt; and send something to &lt;strong&gt;tw1zr&lt;/strong&gt;, &lt;strong&gt;ssh&lt;/strong&gt; into any of the virtual machines and issue the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sendEmail -o tls=yes -xu guest1@pygrn.lab -xp Ln9CQMsDZA -f guest1@pygrn.lab -t tw1zr@pygrn.lab -s watts.pygrn.lab:587 -u &amp;#34;test using sendEmail&amp;#34; -m &amp;#34;This message was sent from the command line using sendEmail.&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Login as &lt;strong&gt;tw1zr&lt;/strong&gt; again, and we can see the e-mail was succesfully sent and received:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Why I self-host everything I can</title>
		<link>http://efym.net/blog/why-i-self-host/</link>
		<pubDate>Sat, 25 Sep 2021 07:16:50 +0100</pubDate>
		
		<guid>http://efym.net/blog/why-i-self-host/</guid>
		<description>&lt;p&gt;Thoughts on why I host the services I use.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;opening-remarks&#34;&gt;Opening remarks&lt;/h2&gt;
&lt;p&gt;Everyone who knows me or has interacted with me in a meaningful way is aware of my disdain towards major corporations, especially the ones that focus in technology. Most of the reasons for this are more ethical and philosophical in nature than born out of practicality, convenience or economic/monetary incentives.&lt;/p&gt;
&lt;p&gt;This is to say I don&amp;rsquo;t disagree they&amp;rsquo;re exceptionally good at what they do or produce, however I think what they do and produce is detrimental to human liberty and society as a whole too, in most cases.&lt;/p&gt;
&lt;h2 id=&#34;chat-software&#34;&gt;Chat software&lt;/h2&gt;
&lt;p&gt;A very good example of the previous statements is WhatsApp; it has a very good feature set, it&amp;rsquo;s simple to use and the servers backing it are excellent in quality, speed and stability; so it&amp;rsquo;s very rare that one would experiece an interruption of service while using it. Same thing can be said of Snapchat, Facebook Messenger, Telegram, WeChat etc.&lt;br&gt;
My problems with them are not that they&amp;rsquo;re not a &lt;em&gt;good&lt;/em&gt; product, the problems are that everything you type/do/say/share is being archived by the company who owns the software and utilized to serve you ads which are tailored to your specific interests thus maximizing profits, dissuade/sensor your opinion in political or social matters, build a profile about you outlining every single personal characteristic you have, even things like &amp;ldquo;at what time of day are you more likely to go to the bathroom&amp;rdquo; are possible for these companies to deduce by correlating information about you on their various sites and analyzing it through machine learning.&lt;/p&gt;
&lt;p&gt;Not to mention that these applications themselves are propietary software whose source code is not available publicly. So despite all the claims the companies makes about respecting users&amp;rsquo; privacy, it&amp;rsquo;s impossible for an independant party to verify the veracity of their words.&lt;br&gt;
And as if not being able to verify what they say wasn&amp;rsquo;t enough (it&amp;rsquo;s enough to not trust them) every single piece of evidence points to the contrary; from Wireshark traffic captures to fines issued to Google, Apple and Facebook from the US government. These companies have been caught time and time again breaking their users&amp;rsquo; trust.&lt;br&gt;
Those are my biggest concerns about software by major corporations.&lt;/p&gt;
&lt;p&gt;But I would still like to be able to communicate through the Internet, so I host a &lt;a href=&#34;https://matrix.org&#34;&gt;Matrix&lt;/a&gt; server with &lt;a href=&#34;https://element.io&#34;&gt;Element&lt;/a&gt; as a web front-end. These are two pieces of free and open source software whose source code you can read and verify nothing malicious is happening behind the scenes.&lt;br&gt;
Every single person with whom I communicate with any kind of regularity has an account there. If someone in my life wants to talk to me they know—or will be made aware that—that&amp;rsquo;s the way of reaching me; if they refuse to use anything other than the mainstream platforms they use then I know I won&amp;rsquo;t be keeping in touch with them.&lt;/p&gt;
&lt;p&gt;This attitude may sound very radical, and to some extent it is, but for me it&amp;rsquo;s very important to keep my actions aligned with my beliefs (putting my money where my mouth is, so to speak). If I strongly feel a certain way about a certain topic but act in a manner which doesn&amp;rsquo;t relfect it I&amp;rsquo;d be a hypocrite; and that&amp;rsquo;s something I&amp;rsquo;d very much rather avoid.&lt;/p&gt;
&lt;h2 id=&#34;websites-and-internet-real-estate&#34;&gt;Websites and Internet real estate&lt;/h2&gt;
&lt;p&gt;Another one of the reasons why I&amp;rsquo;m very opposed to the major tech companies in the world is because of how monolithic they have made the modern Internet. An majority percentage of the total Internet traffic goes to the same 10-15 websites, which of course are all owned by these companies. This allows them to push whatever narrative they choose into the minds of gullible people (which most are) but also since their reach is so massive they can alter real life events and their perception, thus creating a sort of information monopoly.&lt;/p&gt;
&lt;p&gt;This was not the case 10 years ago. When the current all-encompassing nature of the Internet wasn&amp;rsquo;t fully realized yet, people visited many different websites around the Internet, most of which were personal sites controlled by a single person; perhaps with less quality but certainly less subjected to ideas used mainly to futher the agenda of a corporation or for raw profits.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I host my own website. I want to contribute to the few that still think the Internet should be more chaotic and less sanitized. Power and control of information should be more spread out among the people, not in the hands of billionaires.&lt;/p&gt;
&lt;p&gt;I believe every person should have a website they control. Most people actually &lt;em&gt;think&lt;/em&gt; they do because they have a Facebook page or an Instagram feed or some Snapchat whatever wherein they express themselves, but to me this is not ideal for reasons already discussed. What happens when the company that owns your so called &amp;ldquo;page&amp;rdquo; decides to close your account for good or bad reasons (which are entirely up to them), you wouldn&amp;rsquo;t be able to do anything to stop it, if you had your own personal website however, this would not happen.&lt;/p&gt;
&lt;h2 id=&#34;e-mail&#34;&gt;E-mail&lt;/h2&gt;
&lt;p&gt;Sigh&amp;hellip; e-mail servers are such a pain in the ass. Every sysadmin in the world knows this, there are many pieces that need to be in sync with each other and you will be put on a blacklist at the first sight of anything even remotely resembling spam coming from your server, on top of that the protocols are not secure by default.&lt;br&gt;
Most of this is true because e-mail was never designed with security in mind, it&amp;rsquo;s a very old set of protocols that has stuck around too long, to the point where it is probably the most essential method of communication and verification for the mayority of the Internet.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s especially important to remember these things when sending any important information through e-mail which hasn&amp;rsquo;t been encrypted, the contents of e-mails are plain text and anyone sniffing your traffic will be able to read them, your ISP is 100% doing it, for example. So I advice to use something like &lt;strong&gt;PGP&lt;/strong&gt; to encrypt sensitive emails.&lt;/p&gt;
&lt;p&gt;When I think about e-mail servers I picture myself at a shooting range in a life-or-death scenario in which I have to hit a bullseye on every target. But those targets are moving, the building is on fire and I&amp;rsquo;m tripping on acid; also instead of a gun I&amp;rsquo;m using a slingshot.&lt;/p&gt;
&lt;p&gt;You might ask: &amp;ldquo;so if hosting and managing your own e-mail server is so annoying then why should I do it?&amp;rdquo; and depending on your level of computer literacy and willingness to spend time on it the answer to that question will vary wildly from person to person.&lt;/p&gt;
&lt;p&gt;My own personal reasons are briefly discussed above, but adding to that I also:&lt;br&gt;
like a challenge,&lt;br&gt;
like computers&lt;br&gt;
and value my privacy.&lt;br&gt;
Any and every e-mail provider on the Internet can absolutely read your e-mails, no exceptions. Protonmail is a meme, Tutanota is a meme, they all serve you straight up lies at best and at worst are a government honeypot. And that&amp;rsquo;s just referring to the ones that claim to be private, not to something like Gmail, Hotmail and whatever Apple calls their e-mail service nowadays; these last ones are a complete joke when it comes to privacy.&lt;br&gt;
FAGMAN (&lt;strong&gt;F&lt;/strong&gt;acebook, &lt;strong&gt;A&lt;/strong&gt;pple, &lt;strong&gt;G&lt;/strong&gt;oogle, &lt;strong&gt;M&lt;/strong&gt;icrosoft, &lt;strong&gt;A&lt;/strong&gt;mazon and &lt;strong&gt;N&lt;/strong&gt;etflix) are the devil incarnate and their terms of service are the contract you sign to sell your soul.&lt;br&gt;
If you must use e-mail and know your way around Linux then I personally think self-hosting an e-mail service like any and every other service you use is the best solution if privacy is of importance.&lt;/p&gt;
&lt;p&gt;Vincent Canfield of &lt;a href=&#34;https://cock.li&#34;&gt;cock.li&lt;/a&gt; has on his website a paragraph and a quote apparently taken from 4chan which are quite apt to describe what I&amp;rsquo;m trying to say about e-mail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/why-i-self-host/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are also more specific services I host on the Internet or at home (always in a server which I have root access to) and the reason for those are largely the same ones I&amp;rsquo;ve already explained.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 06 | Centralized Logs</title>
		<link>http://efym.net/blog/sysadmin-playground06-centralized-logs/</link>
		<pubDate>Fri, 24 Sep 2021 15:38:24 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground06-centralized-logs/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;new-vms&#34;&gt;New VMs&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to be picking up the pace a bit from now on. Up until now we&amp;rsquo;ve been working on three different virtual machines, but as we deploy the upcoming services we&amp;rsquo;ll be doing so in many different ones; so we&amp;rsquo;ll deploy them now to have them ready.&lt;/p&gt;
&lt;p&gt;Refer to previous chapters if unsure of the exact process to do this with &lt;strong&gt;Terraform&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget to update the KVM network settings on the hypervisor to give these new boxes an IP address through &lt;strong&gt;DHCP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an updated topology diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The new boxes are VM-4 onwards.&lt;br&gt;
Their names are largely irrelevant, I made these up randomly. But we have to keep them consistent with different configurations in many places, so if you&amp;rsquo;re followig along and decide to use different names you will need to replace them in many places accross the config files.&lt;/p&gt;
&lt;h2 id=&#34;syslog-ng-container&#34;&gt;Syslog-ng container&lt;/h2&gt;
&lt;p&gt;In order to troubleshoot any problems in any server environment keeping track of the logs is extremely important; reading the logs is almost always the way to discover what went wrong and how to fix it.&lt;/p&gt;
&lt;p&gt;The most common way to centralize logs is with the Elastic Stack (which is comprised of &lt;strong&gt;Elasticsearch&lt;/strong&gt;, &lt;strong&gt;Logstash&lt;/strong&gt; and &lt;strong&gt;Kibana&lt;/strong&gt;). I won&amp;rsquo;t be deploying that today, I will instead use a much simpler and traditional &lt;strong&gt;syslog&lt;/strong&gt; server.&lt;br&gt;
&lt;em&gt;(It&amp;rsquo;s entirely possible that I&amp;rsquo;ll change my mind and deploy the ELK stack in the near future.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to deploy a container running a &lt;strong&gt;Syslog-ng&lt;/strong&gt; server listening on a specific port, then reconfigure every container we have deployed previously (and every future one) to use a different log driver than the default &lt;strong&gt;Docker&lt;/strong&gt; one, the &lt;strong&gt;syslog&lt;/strong&gt; logging driver will send every container&amp;rsquo;s log to this server. This will allow us to have one place where we can go look at all the logs for every container in every virtual machine.&lt;/p&gt;
&lt;p&gt;Before starting with the &lt;strong&gt;Ansible&lt;/strong&gt; configuration to deploy this container use &lt;strong&gt;certstrap&lt;/strong&gt; to create a certificate which we&amp;rsquo;ll use to encrypt the log packets being sent from every virtual machine to &lt;strong&gt;rumsi&lt;/strong&gt;, which is the box I chose to host this container (refer to previous chapters for guidance on how to create the certificate).&lt;/p&gt;
&lt;p&gt;The container image we&amp;rsquo;ll use is &lt;a href=&#34;https://hub.docker.com/r/balabit/syslog-ng&#34;&gt;balabit/syslog-ng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a new role called &lt;code&gt;syslog-ng&lt;/code&gt; and its tasks file, its content will be as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/syslog-ng/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Set /srv/syslog-ng permissions
  file:
    dest: &amp;#34;/srv/syslog-ng&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Copy syslog-ng.conf into /srv/syslog-ng/
  copy:
    src: &amp;#34;files/syslog-ng/syslog-ng.conf&amp;#34;
    dest: &amp;#34;/srv/syslog-ng/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Syslog-ng container
  docker_container:
    name: &amp;#34;syslog-ng&amp;#34;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#34;balabit/syslog-ng:latest&amp;#34;
    hostname: &amp;#34;{{ ansible_hostname }}.pygrn.lab&amp;#34;
    published_ports:
      - &amp;#34;6514:6514&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
      - &amp;#34;/srv/syslog-ng/syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf&amp;#34;
      - &amp;#34;/srv/syslog-ng/log-data:/var/log/syslog-ng&amp;#34;
      - &amp;#34;/srv/syslog-ng/certs:/tmp/certs&amp;#34;
  register: &amp;#34;syslogcontainerf&amp;#34;

- name: Copy syslog-ng public key into /srv/syslog-ng/cert/
  copy:
    src: &amp;#34;CA/syslog-ng.crt&amp;#34;
    dest: &amp;#34;/srv/syslog-ng/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;logpubf&amp;#34;

- name: Copy syslog-ng private key into /srv/syslog-ng/certs/
  copy:
    src: &amp;#34;CA/syslog-ng.key&amp;#34;
    dest: &amp;#34;/srv/syslog-ng/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0600&amp;#34;
  register: &amp;#34;logprivf&amp;#34;

- name: Copy CA file into /srv/syslog-ng/certs/
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/srv/syslog-ng/certs/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;logpygrncaf&amp;#34;

- name: Copy pygrn.lab-CA.crt to syslog-ng container
  when: &amp;#34;syslogcontainerf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker cp /etc/ssl/pygrn.lab/pygrn.lab-CA.crt syslog-ng:/usr/local/share/ca-certificates/&amp;#34;

- name: Update syslog-ng container ca-certificates
  when: &amp;#34;syslogcontainerf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker exec syslog-ng sh -c &amp;#39;update-ca-certificates&amp;#39;&amp;#34;

- name: Restart syslog-ng container if cert files are added/changed
  when: &amp;#34;logpygrncaf.changed or logpubf.changed or logprivf.changed&amp;#34;
  command:
    cmd: &amp;#34;docker restart syslog-ng&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to create the &lt;strong&gt;syslog-ng&lt;/strong&gt; configuration file which will be mounted inside the container:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/syslog-ng/syslog-ng.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@version: 3.29
@include &amp;#34;scl.conf&amp;#34;

# options
options {
        create_dirs(yes);
        owner(root);
        group(root);
        perm(0644);
        dir_owner(root);
        dir_group(root);
        dir_perm(0755);
};

# sources
source s_local {
        internal();
};

source s_network {
        network (
                ip-protocol(4)
                transport(&amp;#34;udp&amp;#34;)
                port(1514)
        );
        network (
                ip-protocol(4)
                transport(&amp;#34;tcp&amp;#34;)
                port(1514)
        );
        network (
                ip-protocol(4)
                port(6514)
                max-connections(500)
                transport(&amp;#34;tls&amp;#34;)
                tls (
                        cert-file(&amp;#34;/tmp/certs/syslog-ng.crt&amp;#34;)
                        key-file(&amp;#34;/tmp/certs/syslog-ng.key&amp;#34;)
                        peer-verify(optional-untrusted)
                )
        );
};

# destinations
destination d_local {
        file(&amp;#34;/var/log/messages&amp;#34;);
        file(&amp;#34;/var/log/messages-kv.log&amp;#34; template(&amp;#34;$ISODATE $HOST $(format-welf --scope all-nv-pairs)\n&amp;#34;) frac-digits(3));
};

destination d_per-host {
        file(&amp;#34;/var/log/syslog-ng/$HOST-$PROGRAM-$YEAR-$MONTH-$DAY.log&amp;#34;);
};

# logs
log {
        source(s_local);
        destination(d_local);
};

log {
        source(s_network);
        destination(d_per-host);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now modify the containers being deployed in the &lt;strong&gt;openldap&lt;/strong&gt; role updating the log driver and its options. Here&amp;rsquo;s an excerpt of the &lt;strong&gt;phpLDAPadmin&lt;/strong&gt; container with these directives in place:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
- name: phpLDAPadmin container
  when: &amp;#34;ansible_hostname == ldap_webui_host_short&amp;#34;
  docker_container:
    name: &amp;#39;phpLDAPadmin&amp;#39;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#39;osixia/phpldapadmin:latest&amp;#39;
    log_driver: &amp;#34;syslog&amp;#34;
    log_options:
      syslog-address: &amp;#34;tcp+tls://{{ syslog_ng_host }}:6514&amp;#34;
      tag: &amp;#34;phpLDAPadmin&amp;#34;
    published_ports:
      - &amp;#34;6080:80&amp;#34;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The lines that have been inserted are:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    log_driver: &amp;#34;syslog&amp;#34;
    log_options:
      syslog-address: &amp;#34;tcp+tls://{{ syslog_ng_host }}:6514&amp;#34;
      tag: &amp;#34;phpLDAPadmin&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Do this for every container. The &lt;strong&gt;tag&lt;/strong&gt; option will be the container&amp;rsquo;s name; this is useful because the &lt;strong&gt;syslog-ng&lt;/strong&gt; server uses the &lt;code&gt;$PROGRAM&lt;/code&gt; variable in the log files&amp;rsquo; names and that variable is substituted with whatever value we assign to &lt;strong&gt;tag&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;ansible-vault edit&lt;/code&gt; to add the &lt;strong&gt;syslog_ng_host&lt;/strong&gt; variable into our variables file (&lt;code&gt;group_vars/all.yml&lt;/code&gt;) the value of this variable is &lt;strong&gt;rumsi.pygrn.lab&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to keep in mind that by changing the logging driver &lt;strong&gt;Docker&lt;/strong&gt; uses for these containers to a remote server (remote relative to each virtual machine) we&amp;rsquo;re making it so that if this remote server is not running or is missconfigured the containers we try to deploy pointing at it to store their logs will fail to start. Therefore we&amp;rsquo;ll put the &lt;strong&gt;syslog-ng&lt;/strong&gt; role at the top of our &lt;code&gt;playbook.yml&lt;/code&gt; so that it runs first.&lt;br&gt;
It should look like this before we next run the playbook:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat playbook.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: &amp;#34;Preparation&amp;#34;
  hosts: all
  roles:
    - &amp;#34;global_preparation&amp;#34;

- name: &amp;#34;Syslog-ng Server&amp;#34;
  hosts: log
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;syslog-ng&amp;#34;

- name: &amp;#34;OpenLDAP Server&amp;#34;
  hosts: ldap
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap&amp;#34;

- name: &amp;#34;OpenLDAP Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap-client&amp;#34;

- name: &amp;#34;Finilizing&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;global_finalizing&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also need to update the &lt;strong&gt;hosts&lt;/strong&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat hosts&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[log]
rumsi   ansible_host=192.168.122.8   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key

[ldap\]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxn   ansible_host=192.168.122.3   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxo   ansible_host=192.168.122.4   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key

[undefined]
boldh   ansible_host=192.168.122.5   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
grees   ansible_host=192.168.122.6   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
tyule   ansible_host=192.168.122.7   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
rumsi   ansible_host=192.168.122.8   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
watts   ansible_host=192.168.122.9   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that I&amp;rsquo;ve added every new box we spinned up to the hosts file too, but put them in a group called undefined for now because no containers will be deployed to them when we run the playbook again in a minute.&lt;/p&gt;
&lt;h2 id=&#34;running-the-playbook&#34;&gt;Running the playbook&lt;/h2&gt;
&lt;p&gt;After these changes we can run the playbook again.&lt;/p&gt;
&lt;p&gt;To test that the log driver and log server are working &lt;strong&gt;ssh&lt;/strong&gt; into &lt;strong&gt;rumsi&lt;/strong&gt; virtual machine and list the contents of the &lt;strong&gt;/srv/syslog-ng/log-data&lt;/strong&gt; directory, you should see the log files there.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I left out many steps of the instructions to do some of this because those steps have been covered in previous chapters. This isn&amp;rsquo;t a very novice-friendly write-up and I won&amp;rsquo;t be repeating obvious things constantly.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 05 | Passwords and Ansible Vault</title>
		<link>http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/</link>
		<pubDate>Sun, 29 Aug 2021 04:13:05 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;hardening-passwords&#34;&gt;Hardening Passwords&lt;/h2&gt;
&lt;p&gt;Up until now we&amp;rsquo;ve been storing the passwords passed into &lt;strong&gt;Docker&lt;/strong&gt; containers through environment variables in plain text right in the roles&amp;rsquo; tasks; not to mention intentionally using very weak passwords.&lt;br&gt;
There are many solutions to both these points, and presently I&amp;rsquo;ll show one of the simpler ones.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to use a variables file filled with all the passwords stored each in its respective variable; then we&amp;rsquo;re going to encrypt that file with a utility provided by &lt;strong&gt;Ansible&lt;/strong&gt; called &lt;strong&gt;Vault&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We will also use a utility to generate strong passwords. There are plenty of options for this, many websites on the Internet offer this service as well as most full-blown password managers. Here&amp;rsquo;re a couple options to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.passwordstore.org&#34;&gt;pass&lt;/a&gt; (by far my prefered choice, this is what I use for my personal passwords)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitwarden.com&#34;&gt;Bitwarden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keepass.info&#34;&gt;KeePass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://passwordsgenerator.net&#34;&gt;Secure Password Generator&lt;/a&gt; (online website)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the purposes of this write-up I&amp;rsquo;m going to go with the last option seeing as it&amp;rsquo;s the simplest out of them all. Bear in mind I do not recommend using Javascript code found on some website to generate passwords for a production environment, or even for personal use. Even if they claim the code only runs client-side and is never sent accross the Internet.&lt;/p&gt;
&lt;p&gt;Create a directory called &lt;code&gt;group_vars&lt;/code&gt; inside the directory holding all the &lt;strong&gt;Ansible&lt;/strong&gt; files. Inside of it let&amp;rsquo;s create a file called &lt;code&gt;all.yml&lt;/code&gt;, this structure means every &lt;strong&gt;Ansible&lt;/strong&gt; group will have access to the variables we store in this file.&lt;/p&gt;
&lt;p&gt;Use whatever method you chose to generate passwords and store them in this file in YAML format, mine looks like this for now:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat all.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# openldap
ldap_host1: &amp;#34;cutxn.pygrn.lab&amp;#34;
ldap_host1_short: &amp;#34;cutxn&amp;#34;
ldap_host2: &amp;#34;cutxo.pygrn.lab&amp;#34;
ldap_host2_short: &amp;#34;cutxo&amp;#34;
ldap_webui_host: &amp;#34;doris.pygrn.lab&amp;#34;
ldap_webui_host_short: &amp;#34;doris&amp;#34;

ldap_admin_pass: &amp;#34;2hJmj7TFrz&amp;#34;
ldap_config_pass: &amp;#34;bTu5njqLLd&amp;#34;
ldap_readonly_pass: &amp;#34;Drq8nNEG6C&amp;#34;

ldap_tw1zr_pass: &amp;#34;fu9F4yzKH3&amp;#34;
ldap_guest1_pass: &amp;#34;Ln9CQMsDZA&amp;#34;
ldap_guest2_pass: &amp;#34;bKwDKP6z57&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now here&amp;rsquo;s an excerpt of the &lt;code&gt;openldap&lt;/code&gt; role, the task which defines the &lt;strong&gt;OpenLDAP&lt;/strong&gt; &lt;strong&gt;Docker&lt;/strong&gt; container with some of these variables put into place replacing plaintext passwords:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ tail -n32 roles/openldap/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: OpenLDAP container
  when: &amp;#34;ansible_hostname == ldap_host1_short or ansible_hostname == ldap_host2_short&amp;#34;
  docker_container:
    name: &amp;#39;{{ ansible_hostname }}-openldap&amp;#39;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#39;osixia/openldap:latest&amp;#39;
    hostname: &amp;#39;{{ ansible_hostname }}.pygrn.lab&amp;#39;
    published_ports:
      - &amp;#34;389:389&amp;#34;
    env:
      LDAP_BASE_DN: &amp;#34;dc=pygrn,dc=lab&amp;#34;
      LDAP_ORGANISATION: &amp;#34;Pygrn Lab&amp;#34;
      LDAP_DOMAIN: &amp;#34;pygrn.lab&amp;#34;
      LDAP_ADMIN_PASSWORD: &amp;#34;{{ ldap_admin_pass }}&amp;#34;
      LDAP_CONFIG_PASSWORD: &amp;#34;{{ ldap_config_pass }}&amp;#34;
      LDAP_READONLY_USER: &amp;#34;true&amp;#34;
      LDAP_READONLY_USER_USERNAME: &amp;#34;readonly&amp;#34;
      LDAP_READONLY_USER_PASSWORD: &amp;#34;{{ ldap_readonly_pass }}&amp;#34;
      LDAP_TLS: &amp;#34;true&amp;#34;
      LDAP_TLS_VERIFY_CLIENT: &amp;#34;try&amp;#34;
      LDAP_TLS_CA_CRT_FILENAME: &amp;#34;pygrn.lab-CA.crt&amp;#34;
      LDAP_TLS_CRT_FILENAME: &amp;#34;openldap.crt&amp;#34;
      LDAP_TLS_KEY_FILENAME: &amp;#34;openldap.key&amp;#34;
      LDAP_REPLICATION: &amp;#34;true&amp;#34;
      LDAP_REPLICATION_HOSTS: &amp;#34;#PYTHON2BASH:[&amp;#39;ldap://{{ ldap_host1 }}&amp;#39;,&amp;#39;ldap://{{ ldap_host2 }}&amp;#39;]&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
      - &amp;#34;/srv/openldap/ldap:/var/lib/ldap&amp;#34;
      - &amp;#34;/srv/openldap/slapd.d:/etc/ldap/slapd.d&amp;#34;
      - &amp;#34;/srv/openldap/ldifs:/etc/ldap/ldifs&amp;#34;
      - &amp;#34;/srv/openldap/certs:/container/service/slapd/assets/certs&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; I&amp;rsquo;ll replace everything I can regarding hosts and passwords in every role of the playbook to variables within this file, so next time you see references to these variables in future chapters you&amp;rsquo;ll know where their value is stored.&lt;/p&gt;
&lt;h2 id=&#34;encrypting-files-with-ansible-vault&#34;&gt;Encrypting files with Ansible Vault&lt;/h2&gt;
&lt;p&gt;The next thing to do is to encrypt the &lt;code&gt;group_vars/all.yml&lt;/code&gt; file with &lt;strong&gt;ansible-vault&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ansible-vault encrypt group_vars/all.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That command will ask you to enter a password to encrypt the file, this password will need to be entered everytime we run the playbook so that &lt;strong&gt;Ansible&lt;/strong&gt; can decrypt the file, read its contents and expand the variables within our roles.&lt;/p&gt;
&lt;p&gt;We can avoid having to type the password everytime we want to encrypt a new file or run the playbook by storing the password in plain text in a file called &lt;code&gt;.vaultpass&lt;/code&gt; then defining it within the &lt;strong&gt;Ansible&lt;/strong&gt; configuration file &lt;code&gt;ansible.cfg&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo -n nyaa &amp;gt; .vaultpass &amp;amp;&amp;amp; echo vault_password_file = ./.vaultpass &amp;gt;&amp;gt; ansible.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yes, I have again used &amp;lsquo;&lt;strong&gt;nyaa&lt;/strong&gt;&amp;rsquo; as a password, this time even as a master for this pseudo password manager we&amp;rsquo;re using for our playbook. I will again reiterate that one should never use such a simplistic password for anything other than test environments like this one; and also storing a password in plain text inside the directory which holds all the files encrypted by it has its own set of drawbacks, but explaining that is out of scope for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s also encrypt every file inside the &lt;code&gt;files&lt;/code&gt; directory with &lt;strong&gt;ansible-vault&lt;/strong&gt;, some of them contain plain text passwords and there&amp;rsquo;s no downside to encrypting them too&lt;br&gt;
Here&amp;rsquo;s a simple one-liner script that will iterate through every file inside the &lt;code&gt;files&lt;/code&gt; directory and encrypt them, excluding those inside the &lt;code&gt;CA&lt;/code&gt; directory, which are our certificates:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ for f in $(find files/ -type f -not -path &amp;#34;files/CA/*&amp;#34;); do ansible-vault encrypt $f; done
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;updating-ldap-server-with-new-passwords&#34;&gt;Updating LDAP server with new passwords&lt;/h2&gt;
&lt;p&gt;Next thing we need to do is update the users&amp;rsquo; passwords in our &lt;strong&gt;LDAP&lt;/strong&gt; server, we could authenticate as &lt;strong&gt;cn=admin&lt;/strong&gt; to change the passwords, which is especially useful if we do not know what the current password is, but since every user has read/write access to its own password, and we know what it is, we can bind as the user to change it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldappasswd -ZZ -H ldap://cutxn.pygrn.lab -D cn=tw1zr,ou=Users,dc=pygrn,dc=lab -w nyaa -a nyaa -s fu9F4yzKH3
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldappasswd -ZZ -H ldap://cutxn.pygrn.lab -D cn=guest1,ou=Users,dc=pygrn,dc=lab -w yugi -a yugi -s Ln9CQMsDZA
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldappasswd -ZZ -H ldap://cutxn.pygrn.lab -D cn=guest2,ou=Users,dc=pygrn,dc=lab -w yigo -a yigo -s bKwDKP6z57
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The process of changing &lt;strong&gt;cn=admin,dc=pygrn,dc=lab&lt;/strong&gt; and &lt;strong&gt;cn=admin,cn=config&lt;/strong&gt; is more involved, we&amp;rsquo;re going to do it from inside the &lt;strong&gt;OpenLDAP&lt;/strong&gt; container, so first &lt;strong&gt;ssh&lt;/strong&gt; into either &lt;strong&gt;cutxn&lt;/strong&gt; or &lt;strong&gt;cutxo&lt;/strong&gt; and run an interactive shell inside the container like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -i /path/to/ssh/key root@192.168.122.3
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker exec -it cutxn-openldap bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have a shell on the container let&amp;rsquo;s do an &lt;strong&gt;ldapsearch&lt;/strong&gt; to display the dn we need to change and the &lt;strong&gt;RootDN&lt;/strong&gt; hashed password, as well as using &lt;strong&gt;tee&lt;/strong&gt; to save the output to an ldif file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldapsearch -LLL -ZZ -H ldap://cutxn.pygrn.lab -D cn=admin,cn=config -w nyaa -b cn=config olcRootDN=cn=admin,dc=pygrn,dc=lab dn olcRootDN olcRootPW | tee /tmp/rootnew.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now use &lt;strong&gt;slappasswd&lt;/strong&gt; to generate a new hashed password and append it to the end of the file we just created, this command will prompt you to enter a password an then confirm it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ slappasswd -h {SSHA} &amp;gt;&amp;gt; /tmp/rootnew.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now modify the file to look like this, where the value of olcRootPW is the new one we just generated, meaning that we delete the one which was there previously and replace it with the one at the bottom of the file which we appended there:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat /tmp/rootnew.ldif&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dn: olcDatabase={1}mdb,cn=config
changeType: modify
replace: olcRootPW
olcRootPW: {SSHA}BLjBfAC4CLugKZ/eUj8HIvhUwEEJqTI2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apply the ldif file to modify the password of &lt;strong&gt;cn=admin,cn=config&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldapmodify -ZZ -H ldap://cutxn.pygrn.lab -D cn=admin,cn=config -w nyaa -f /tmp/rootnew.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will make both &lt;strong&gt;cn=admin,dc=pygrn,dc=lab&lt;/strong&gt; and &lt;strong&gt;cn=admin,cn=config&lt;/strong&gt; have the same password, you can also just re-run the Ansible playbook with the new variables in place to modify these entries, after all that is the advantage of reproducible infrastructure.&lt;/p&gt;
&lt;p&gt;Modify the &lt;code&gt;libnss-ldap.secret&lt;/code&gt; and &lt;code&gt;pam_ldap.secret&lt;/code&gt; files too with the new &lt;strong&gt;cn=admin&lt;/strong&gt; password:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo -n &amp;#39;2hJmj7TFrz&amp;#39; | tee pam_ldap.secret &amp;gt; libnss-ldap.secret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cloud-init-root-password&#34;&gt;Cloud init root password&lt;/h2&gt;
&lt;p&gt;Lastly we will change the root password of the boxes by modifying its definition in the &lt;strong&gt;cloud-init&lt;/strong&gt; files within the &lt;strong&gt;Terraform&lt;/strong&gt; directory. Change to that directory (I called mine &lt;strong&gt;cloud_inits&lt;/strong&gt;) and issue this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sed -i &amp;#39;s/nyaa/2hJmj7TFrz/g&amp;#39; *
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next time the boxes are rebooted the root user will have the same password as our &lt;strong&gt;LDAP&lt;/strong&gt; &lt;strong&gt;cn=admin&lt;/strong&gt;.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 04 | OpenLDAP</title>
		<link>http://efym.net/blog/sysadmin-playground04-openldap/</link>
		<pubDate>Mon, 16 Aug 2021 02:33:51 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground04-openldap/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;quick-ping-check-with-ansible-ad-hoc-command&#34;&gt;Quick ping check with Ansible ad-hoc command&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s run a ping test with &lt;strong&gt;Ansible&lt;/strong&gt; to make sure all our VMs are running fine first:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ ansible all -m ping&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cutxo | SUCCESS =&amp;gt; {
    &amp;#34;ansible_facts&amp;#34;: {
        &amp;#34;discovered_interpreter_python&amp;#34;: &amp;#34;/usr/bin/python3&amp;#34;
    },
    &amp;#34;changed&amp;#34;: false,
    &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34;
}
doris | SUCCESS =&amp;gt; {
    &amp;#34;ansible_facts&amp;#34;: {
        &amp;#34;discovered_interpreter_python&amp;#34;: &amp;#34;/usr/bin/python3&amp;#34;
    },
    &amp;#34;changed&amp;#34;: false,
    &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34;
}
cutxn | SUCCESS =&amp;gt; {
    &amp;#34;ansible_facts&amp;#34;: {
        &amp;#34;discovered_interpreter_python&amp;#34;: &amp;#34;/usr/bin/python3&amp;#34;
    },
    &amp;#34;changed&amp;#34;: false,
    &amp;#34;ping&amp;#34;: &amp;#34;pong&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the &lt;code&gt;&amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/code&gt; response on every one of our virtual machines, this means they are up and &lt;strong&gt;Ansible&lt;/strong&gt; is able to communicate with them.&lt;/p&gt;
&lt;h2 id=&#34;configuration-of-ldap-server-container&#34;&gt;Configuration of LDAP server container&lt;/h2&gt;
&lt;p&gt;To run our &lt;strong&gt;LDAP&lt;/strong&gt; server we will use a master/master configuration of &lt;a href=&#34;https://openldap.org&#34;&gt;OpenLDAP&lt;/a&gt; on the &lt;strong&gt;cutxn&lt;/strong&gt; and &lt;strong&gt;cutxo&lt;/strong&gt; virtual machines. We&amp;rsquo;ll use &lt;strong&gt;Ansible&lt;/strong&gt; to deploy it so we need to set up the tasks on the &lt;strong&gt;openldap&lt;/strong&gt; role we made in the previous chapter.&lt;/p&gt;
&lt;p&gt;Modify the content of &lt;code&gt;/path/to/ansible/roles/openldap/tasks/main.yml&lt;/code&gt; by appending these lines:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines to append&lt;/strong&gt; to &lt;code&gt;roles/openldap/tasks/main.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: Set /srv/openldap permissions
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/openldap&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Set /srv/openldap/ldap permissions
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/openldap/ldap&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Set /srv/openldap/slapd.d permissions
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/openldap/slapd.d&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Copy openldap ldifs into /srv/openldap/
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;openldap/ldifs&amp;#34;
    dest: &amp;#34;/srv/openldap/&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;

- name: Set /srv/openldap/certs permissions
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/openldap/certs&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Copy pygrn.lab-CA.crt into /srv/openldap/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/srv/openldap/certs/&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Copy openldap.crt into /srv/openldap/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/openldap.crt&amp;#34;
    dest: &amp;#34;/srv/openldap/certs/&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Copy openldap.key into /srv/openldap/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/openldap.key&amp;#34;
    dest: &amp;#34;/srv/openldap/certs/&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: OpenLDAP container
  when: &amp;#34;ansible_hostname == &amp;#39;cutxn&amp;#39; or ansible_hostname == &amp;#39;cutxo&amp;#39;&amp;#34;
  docker_container:
    name: &amp;#39;{{ ansible\_hostname }}-openldap&amp;#39;
    restart\_policy: &amp;#34;always&amp;#34;
    image: &amp;#39;osixia/openldap:latest&amp;#39;
    hostname: &amp;#39;{{ ansible\_hostname }}.pygrn.lab&amp;#39;
    published\_ports:
      - &amp;#34;389:389&amp;#34;
    env:
      LDAP_BASE_DN: &amp;#34;dc=pygrn,dc=lab&amp;#34;
      LDAP_ORGANISATION: &amp;#34;Pygrn Lab&amp;#34;
      LDAP_DOMAIN: &amp;#34;pygrn.lab&amp;#34;
      LDAP_ADMIN_PASSWORD: &amp;#34;nyaa&amp;#34;
      LDAP_CONFIG_PASSWORD: &amp;#34;nyaa&amp;#34;
      LDAP_READONLY_USER: &amp;#34;true&amp;#34;
      LDAP_READONLY_USER_USERNAME: &amp;#34;readonly&amp;#34;
      LDAP_READONLY_USER_PASSWORD: &amp;#34;aayn&amp;#34;
      LDAP_TLS: &amp;#34;true&amp;#34;
      LDAP_TLS_VERIFY_CLIENT: &amp;#34;try&amp;#34;
      LDAP_TLS_CA\_CRT_FILENAME: &amp;#34;pygrn.lab-CA.crt&amp;#34;
      LDAP_TLS_CRT_FILENAME: &amp;#34;openldap.crt&amp;#34;
      LDAP_TLS_KEY_FILENAME: &amp;#34;openldap.key&amp;#34;
      LDAP_REPLICATION: &amp;#34;true&amp;#34;
      LDAP_REPLICATION_HOSTS: &amp;#34;#PYTHON2BASH:[&amp;#39;ldap://cutxn.pygrn.lab&amp;#39;,&amp;#39;ldap://cutxo.pygrn.lab&amp;#39;]&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
      - &amp;#34;/srv/openldap/ldap:/var/lib/ldap&amp;#34;
      - &amp;#34;/srv/openldap/slapd.d:/etc/ldap/slapd.d&amp;#34;
      - &amp;#34;/srv/openldap/certs:/container/service/slapd/assets/certs&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first few tasks create &lt;code&gt;/srv/openldap&lt;/code&gt; and some sub-directories, set their permissions, then copy certificate files and two ldif files (&lt;code&gt;auth_and_tls.ldif&lt;/code&gt; and &lt;code&gt;groups_and_users.ldif&lt;/code&gt;—content of these below) into them to modify the &lt;strong&gt;LDAP&lt;/strong&gt; server.&lt;br&gt;
The last task defines the &lt;strong&gt;openldap&lt;/strong&gt; container.&lt;br&gt;
The image I&amp;rsquo;m using is &lt;a href=&#34;https://github.com/osixia/docker-openldap&#34;&gt;docker-openldap&lt;/a&gt;, there is decent documentation on their page.&lt;/p&gt;
&lt;p&gt;Most of the environment variables defined in this container are very similar to the ones defined in the &lt;strong&gt;php&lt;/strong&gt; we made previously. We define some &lt;strong&gt;LDAP&lt;/strong&gt; parameters, credentials, certificates and the DNS address (made resolvable by the local zone we did in &lt;a href=&#34;http://efym.net/blog/sysadmin-playground02&#34;&gt;Part 2&lt;/a&gt;) of the two hosts serving as master/master.&lt;br&gt;
This container will get deployed to both &lt;strong&gt;cutxn&lt;/strong&gt; and &lt;strong&gt;cutxo&lt;/strong&gt; since we&amp;rsquo;re using this conditional &lt;code&gt;when: &amp;quot;ansible_hostname == &#39;cutxn&#39; or ansible_hostname == &#39;cutxo&#39;&amp;quot;&lt;/code&gt; just like in the previous container, only this time it specifies two hostnames and will get deployed to both.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the output of using &lt;strong&gt;cat&lt;/strong&gt; on the ldif files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/openldap/ldifs/auth_and_tls.ldif&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# disallow anonymous bind
dn: cn=config
changetype: modify
add: olcDisallows
olcDisallows: bind_anon

# require authentication
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
add: olcRequires
olcRequires: authc

# require tls
dn: cn=config
changetype:  modify
add: olcSecurity
olcSecurity: tls=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/openldap/ldifs/groups_and_users.ldif&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# &amp;#39;Groups&amp;#39; organizational unit
dn: ou=Groups,dc=pygrn,dc=lab
objectclass: organizationalUnit
objectclass: top
ou: Groups

# &amp;#39;wheel&amp;#39; posix group
dn: cn=wheel,ou=Groups,dc=pygrn,dc=lab
cn: wheel
gidnumber: 1250
objectclass: posixGroup
objectclass: top

# &amp;#39;guests&amp;#39; posix group
dn: cn=guests,ou=Groups,dc=pygrn,dc=lab
cn: guests
gidnumber: 1260
objectclass: posixGroup
objectclass: top

# &amp;#39;Users&amp;#39; organizational unit
dn: ou=Users,dc=pygrn,dc=lab
objectclass: organizationalUnit
objectclass: top
ou: Users

# &amp;#39;tw1zr&amp;#39; posix account, member of &amp;#39;wheel&amp;#39;
dn: cn=tw1zr,ou=Users,dc=pygrn,dc=lab
cn: tw1zr
gidnumber: 1250
givenname: tw1zr
homedirectory: /home/tw1zr
loginshell: /bin/bash
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: tw1zr
uid: tw1zr
uidnumber: 1250
userpassword: {MD5}L2vYPpPFMwps3sz3Q0b90A==

# &amp;#39;guest1&amp;#39; posix account, member of &amp;#39;guests&amp;#39;
dn: cn=guest1,ou=Users,dc=pygrn,dc=lab
cn: guest1
gidnumber: 1260
givenname: guest1
homedirectory: /home/guest1
loginshell: /bin/bash
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: guest1
uid: guest1
uidnumber: 1261
userpassword: {MD5}vQ3rQ4oyWpcZcFD5w7dldw==

# &amp;#39;guest2&amp;#39; posix account, member of &amp;#39;guests&amp;#39;
dn: cn=guest2,ou=Users,dc=pygrn,dc=lab
cn: guest2
gidnumber: 1260
givenname: guest2
homedirectory: /home/guest2
loginshell: /bin/bash
objectclass: inetOrgPerson
objectclass: posixAccount
objectclass: top
sn: guest2
uid: guest2
uidnumber: 1262
userpassword: {MD5}ZqXA290kYZ/F6XnHj6RpRw==
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configuring-ldap-client-role&#34;&gt;Configuring LDAP client role&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re also going to create an independant role which will configure our virtual machines to act as clients of the &lt;strong&gt;LDAP&lt;/strong&gt; server. This will make it so that the users and groups we create on &lt;strong&gt;LDAP&lt;/strong&gt; are available on &lt;strong&gt;Linux&lt;/strong&gt; as if they were natively created on the machines.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;/path/to/ansible/roles/openldap-client/tasks/main.yml&lt;/code&gt; to look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/openldap-client/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Install Linux dependencies for connecting to LDAP server
  apt:
    name: &amp;#34;{{ item }}&amp;#34;
    state: &amp;#34;latest&amp;#34;
    update_cache: &amp;#34;yes&amp;#34;
  with_items:
    - &amp;#34;ldap-utils&amp;#34;
    - &amp;#34;libnss-ldap&amp;#34;
    - &amp;#34;libpam-ldap&amp;#34;
    - &amp;#34;nscd&amp;#34;

- name: Copy openldap.crt into /etc/ssl/pygrn.lab/
  copy:
    src: &amp;#34;CA/openldap.crt&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0664&amp;#34;

- name: Copy openldap.key into /etc/ssl/pygrn.lab/
  copy:
    src: &amp;#34;CA/openldap.key&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0660&amp;#34;

- name: Add nsswitch.conf to /etc/
  copy:
    src: &amp;#34;nsswitch.conf&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;
  register: &amp;#34;add_nsswitch_result&amp;#34;

- name: Add common-session to /etc/pam.d/
  copy:
    src: &amp;#34;common-session&amp;#34;
    dest: &amp;#34;/etc/pam.d/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add pam_ldap.conf to /etc/
  copy:
    src: &amp;#34;pam_ldap.conf&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add libnss-ldap.conf to /etc/
  copy:
    src: &amp;#34;libnss-ldap.conf&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add pam_ldap.secret to /etc/
  copy:
    src: &amp;#34;pam_ldap.secret&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Add libnss-ldap.secret to /etc/
  copy:
    src: &amp;#34;libnss-ldap.secret&amp;#34;
    dest: &amp;#34;/etc/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Restart nscd if nsswitch.conf is changed
  when: &amp;#34;add_nsswitch_result.changed&amp;#34;
  systemd:
    name: &amp;#34;nscd&amp;#34;
    state: &amp;#34;restarted&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now here are the contents of these files which are being copied by the &lt;code&gt;openldap-client&lt;/code&gt; role, I&amp;rsquo;ll &lt;strong&gt;cat&lt;/strong&gt; them and drop the output. They all go inside the &lt;code&gt;/path/to/ansible/files/&lt;/code&gt; directory so &lt;strong&gt;Ansible&lt;/strong&gt; can access them and copy them over to our virtual machines when the playbook is executed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/nsswitch.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;passwd:         files ldap
group:          files ldap
shadow:         files ldap
gshadow:        files

hosts:          files dns
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/common-session&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;session [default=1]   pam_permit.so
session requisite     pam_deny.so
session required      pam_permit.so
session required      pam_unix.so
session optional      pam_systemd.so
session required      pam_mkhomedir.so skel=/etc/skel umask=077
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/pam_ldap.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base dc=pygrn,dc=lab
uri ldap://cutxn.pygrn.lab ldap://cutxo.pygrn.lab
ldap_version 3
binddn cn=readonly,dc=pygrn,dc=lab
bindpw aayn
rootbinddn cn=admin,dc=pygrn,dc=lab
port 389

pam_password crypt

ssl start_tls
tls_checkpeer yes
tls_cacertfile /etc/ssl/pygrn.lab/pygrn.lab-CA.crt
tls_cert /etc/ssl/pygrn.lab/openldap.crt
tls_key /etc/ssl/pygrn.lab/openldap.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/libnss-ldap.conf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;base dc=pygrn,dc=lab
uri ldap://cutxn.pygrn.lab ldap://cutxo.pygrn.lab
ldap_version 3
binddn cn=readonly,dc=pygrn,dc=lab
bindpw aayn
rootbinddn cn=admin,dc=pygrn,dc=lab
port 389

ssl start_tls
tls_checkpeer yes
tls_cacertfile /etc/ssl/pygrn.lab/pygrn.lab-CA.crt
tls_cert /etc/ssl/pygrn.lab/openldap.crt
tls_key /etc/ssl/pygrn.lab/openldap.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;pam_ldap.secret&lt;/code&gt; and &lt;code&gt;libnss-pam.secret&lt;/code&gt; files both just hold the rootdn password of the &lt;strong&gt;LDAP&lt;/strong&gt; server. This is useful to make root on every box behave like &lt;strong&gt;cn=admin&lt;/strong&gt;. I&amp;rsquo;ll simply use &amp;lsquo;&lt;strong&gt;nyaa&lt;/strong&gt;&amp;rsquo; as password because this is a test environment.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo -n &amp;#39;nyaa&amp;#39; | tee pam_ldap.secret &amp;gt; libnss-ldap.secret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;openldap.crt&lt;/code&gt; and &lt;code&gt;openldap.key&lt;/code&gt; files are the certificate and key we created so we could use &lt;strong&gt;TLS&lt;/strong&gt; with &lt;strong&gt;OpenLDAP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before running the playbook again, let&amp;rsquo;s create the &lt;code&gt;global_finalizing&lt;/code&gt; role. For now this role will only make sure some systemd services are enabled and running on the virtual machines.&lt;/p&gt;
&lt;h2 id=&#34;finalization-role&#34;&gt;Finalization role&lt;/h2&gt;
&lt;p&gt;This doesn&amp;rsquo;t mean we won&amp;rsquo;t create any more roles by the way, not even close. I just like to have a role that runs before all the others and a role that runs after. Helps me with organization.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;roles/global_finalizing/tasks/main.yml&lt;/code&gt; with these lines:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Make sure some services are started and enabled
  systemd:
    name: &amp;#34;{{ item }}&amp;#34;
    state: &amp;#34;started&amp;#34;
    enabled: &amp;#34;yes&amp;#34;
  with_items:
    - &amp;#34;docker&amp;#34;
    - &amp;#34;nscd&amp;#34;
    - &amp;#34;sshd&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;running-the-playbook-after-the-new-changes&#34;&gt;Running the playbook after the new changes&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make sure our &lt;strong&gt;playbook.yml&lt;/strong&gt; file looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat playbook.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: &amp;#34;Preparation&amp;#34;
  hosts: all
  roles:
    - &amp;#34;global_preparation&amp;#34;

- name: &amp;#34;OpenLDAP Server&amp;#34;
  hosts: ldap
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap&amp;#34;

- name: &amp;#34;OpenLDAP Clients&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap-client&amp;#34;

- name: &amp;#34;Finilizing&amp;#34;
  hosts: all
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;global_finalizing&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now run the playbook again, once finished we will have a pair of &lt;strong&gt;LDAP&lt;/strong&gt; servers in two different VMs with master/master replication.&lt;/p&gt;
&lt;p&gt;When the playbook finishes running we&amp;rsquo;ll try to connect to the &lt;strong&gt;LDAP&lt;/strong&gt; server with the &lt;strong&gt;phpLDAPadmin&lt;/strong&gt; front-end we deployed earlier.&lt;/p&gt;
&lt;p&gt;Recreate the &lt;strong&gt;ssh&lt;/strong&gt; tunnel to access the virtual machine on port 6080:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -L 6080:192.168.122.2:6080 root@[IP of hypervisor] -N
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open a web browser and go to &lt;strong&gt;localhost:6080&lt;/strong&gt;. When the page loads try to login into the &lt;strong&gt;LDAP&lt;/strong&gt; server with the credentials we defined for the &lt;strong&gt;Docker&lt;/strong&gt; container.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;modifying-the-ldap-server&#34;&gt;Modifying the LDAP server&lt;/h2&gt;
&lt;p&gt;We could do whatever modification we wanted through the &lt;strong&gt;PHP&lt;/strong&gt; front-end, but we&amp;rsquo;re going to use the command line to apply the ldif files we copied into the machines with &lt;strong&gt;Ansible&lt;/strong&gt; in the earlier role.&lt;/p&gt;
&lt;p&gt;Log into &lt;strong&gt;cutxn&lt;/strong&gt; through &lt;strong&gt;ssh&lt;/strong&gt; and apply the first ldif file with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ldapmodify -ZZ -H ldap://cutxn.pygrn.lab -D cn=admin,cn=config -w nyaa -f /srv/openldap/ldifs/auth_and_tls.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;auth_and_tls.ldif&lt;/strong&gt; file modifies the &lt;strong&gt;cn=config&lt;/strong&gt; so that anonymous binds are not allowed and explicit authentication is required instead. If you look at the &lt;strong&gt;Ansible&lt;/strong&gt; task where we defined credentials for &lt;strong&gt;LDAP&lt;/strong&gt; there is a read-only account which will be used to query the directory structure and retrieve users/groups. It also disallows any connection which isn&amp;rsquo;t using &lt;strong&gt;TLS&lt;/strong&gt;.&lt;br&gt;
Now apply the second ldif with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ldapadd -ZZ -H ldap://cutxn.pygrn.lab -D cn=admin,dc=pygrn,dc=lab -w nyaa -f /srv/openldap/ldifs/groups_and_users.ldif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;groups_and_users.ldif&lt;/code&gt; file adds two organizational units (OU): &lt;strong&gt;Groups&lt;/strong&gt; and &lt;strong&gt;Users&lt;/strong&gt;; then adds two posix groups under &lt;strong&gt;ou=Groups&lt;/strong&gt;: &lt;strong&gt;wheel&lt;/strong&gt; and &lt;strong&gt;guests&lt;/strong&gt;; and three posix users under &lt;strong&gt;ou=Users&lt;/strong&gt;: &lt;strong&gt;tw1zr&lt;/strong&gt;, &lt;strong&gt;guest1&lt;/strong&gt; and &lt;strong&gt;guest2&lt;/strong&gt;. Here&amp;rsquo;s a diagram depicting it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The dotted lines at the bottom denote which posix users belong to which posix groups, this is accomplished by setting the users&amp;rsquo; GID number to the same as the group you want them to belong to (re-read the ldif file).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do an &lt;strong&gt;ldapsearch&lt;/strong&gt; to check our changes were applied correctly; we&amp;rsquo;ll also do the search pointing at &lt;strong&gt;cutxo&lt;/strong&gt; instead of &lt;strong&gt;cutxn&lt;/strong&gt; to check that replication is working:&lt;/p&gt;
&lt;p&gt;The following command queries the cn=config and uses &lt;strong&gt;grep&lt;/strong&gt; to filter the output so it only displays the olc parameters to do with anonymous binds, &lt;strong&gt;TLS&lt;/strong&gt; requirement and authentication requirement:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ ldapsearch -ZZ -H ldap://cutxo.pygrn.lab -D cn=admin,cn=config -w nyaa -b cn=config | grep &#39;olcDisallows:\|olcSecurity:\|olcRequires:&#39;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;olcDisallows: bind_anon
olcSecurity: tls=1
olcRequires: authc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I&amp;rsquo;ll run another &lt;strong&gt;ldapsearch&lt;/strong&gt; to query the entire DN:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldapsearch -ZZ -H ldap://cutxo.pygrn.lab -D cn=admin,dc=pygrn,dc=lab -w nyaa -b dc=pygrn,dc=lab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output of that command shows the extended ldif of the entire DN. We can also check this through that &lt;strong&gt;phpLDAPadmin&lt;/strong&gt; front-end we deployed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/6.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s log into the three VMs through &lt;strong&gt;ssh&lt;/strong&gt; using the three different users we created on the &lt;strong&gt;LDAP&lt;/strong&gt; server. We added passwords encoded in MD5 in the &lt;code&gt;groups_and_users.ldif&lt;/code&gt; file, I&amp;rsquo;ll type them here now in plain text so we can use them to &lt;strong&gt;ssh&lt;/strong&gt; into the boxes:&lt;/p&gt;
&lt;p&gt;root:nyaa
tw1zr:nyaa
guest1:yugi
guest2:yigo&lt;/p&gt;
&lt;p&gt;Authenticating as &lt;strong&gt;tw1zr&lt;/strong&gt;: &lt;img src=&#34;http://efym.net/blog/sysadmin-playground/7.0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Authenticating as &lt;strong&gt;guest1&lt;/strong&gt;: &lt;img src=&#34;http://efym.net/blog/sysadmin-playground/7.1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Authenticating as &lt;strong&gt;guest2&lt;/strong&gt;: &lt;img src=&#34;http://efym.net/blog/sysadmin-playground/7.2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;None of these accounts were created on the &lt;strong&gt;Linux&lt;/strong&gt; machines, &lt;strong&gt;Linux&lt;/strong&gt; is just querying the &lt;strong&gt;LDAP&lt;/strong&gt; server and allowing the posix accounts there to access the machine as if they were local, this is what our configuration files are accomplishing.&lt;br&gt;
I also ran &lt;code&gt;sudo -l&lt;/code&gt; as &lt;strong&gt;tw1zr&lt;/strong&gt; to make sure our &lt;strong&gt;sudo&lt;/strong&gt; privileges were working properly; we defined all the users in the wheel group to be able to run &lt;strong&gt;sudo&lt;/strong&gt; commands without a password.&lt;/p&gt;
&lt;p&gt;Many services out there are designed to be compatible with &lt;strong&gt;LDAP&lt;/strong&gt; authentication. We will likely use it again when we deploy further services.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 03 | Ansible and Docker</title>
		<link>http://efym.net/blog/sysadmin-playground03-ansible-docker/</link>
		<pubDate>Fri, 13 Aug 2021 04:44:02 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground03-ansible-docker/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;configuring-ansible&#34;&gt;Configuring Ansible&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to be running &lt;strong&gt;Ansible&lt;/strong&gt; from the hypervisor box to configure and set up everything on our virtual machines. To do this we&amp;rsquo;ll have to configure a few things.&lt;/p&gt;
&lt;p&gt;This is the output of &lt;code&gt;tree -L 1 -a&lt;/code&gt; inside the directory where we hold all &lt;strong&gt;Ansible&lt;/strong&gt; files:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ tree -L 1 -a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
├── ansible.cfg
├── files
├── hosts
├── playbook.yml
└── roles
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These files/directories serve the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; holds &lt;strong&gt;Ansible&lt;/strong&gt; configurations for the current directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt; This directory holds somes files which we will copy into our virtual machines.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hosts&lt;/code&gt; defines the IP, login user, &lt;strong&gt;ssh&lt;/strong&gt; key among other things for every box &lt;strong&gt;Ansible&lt;/strong&gt; will make deployments to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playbook.yml&lt;/code&gt; This is the main file which defines every role that will be run.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;roles&lt;/code&gt; This directory holds the roles and their respective tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was an extremely simplified rundown of what some files do, if you&amp;rsquo;re not familiar with how &lt;strong&gt;Ansible&lt;/strong&gt; works you should go to its &lt;a href=&#34;https://docs.ansible.com&#34;&gt;documentation site&lt;/a&gt; and get yourself acquainted with its inner workings.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ansible.cfg&lt;/code&gt; file just disables some deprecation warnings because of the syntax I like to use in YAML for the roles/tasks configuration files as well as settings the hosts file as the inventory; it should look like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[defaults]
deprecation_warnings = False
inventory = hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The self-explanatory named &lt;code&gt;hosts&lt;/code&gt; file contains entries for the three virtual machines we have created and the groups they belong to (any host can belong to any number of groups). Here&amp;rsquo;s an example of the structure with placeholder groups:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[group1]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]

[group2]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
cutxn   ansible_host=192.168.122.3   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
cutxo   ansible_host=192.168.122.4   ansible_ssh_user=root   ansible_ssh_private_key_file=[/path/to/ssh/key]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;playbook.yml&lt;/code&gt; file is what we point to when running &lt;strong&gt;Ansible&lt;/strong&gt;. Create the file like this for now, it will make sense further down this post.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Preparation
  hosts: all
  roles:
    - global_preparation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the &lt;strong&gt;roles&lt;/strong&gt; directory holds more directories inside of it, one for every service (mostly).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the output of &lt;code&gt;tree -L 4&lt;/code&gt; inside the &lt;strong&gt;Ansible&lt;/strong&gt; directory. I have created two roles for now, &lt;code&gt;global_preparation&lt;/code&gt; and &lt;code&gt;global_finalizing&lt;/code&gt;, these two roles will run on every virtual machine we deploy. They contain general user-defined configurations as well as the installation of some packages. For the moment we&amp;rsquo;ll only be dealing with &lt;code&gt;global_preparation&lt;/code&gt;.&lt;br&gt;
&lt;em&gt;I intentionally left out the&lt;/em&gt; &lt;code&gt;files&lt;/code&gt; &lt;em&gt;directory and its contents for now, we&amp;rsquo;ll look at that soon enough.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ tree -L 4&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
├── ansible.cfg
├── hosts
├── playbook.yml
└── roles
    ├── global\_finalizing
    │   └── tasks
    │       └── main.yml
    └── global\_preparation
        └── tasks
            └── main.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Firstly, let&amp;rsquo;s modify &lt;code&gt;main.yml&lt;/code&gt; for the &lt;code&gt;global_preparation&lt;/code&gt; role to look like this:&lt;br&gt;
&lt;em&gt;(The &lt;code&gt;global_finalizing&lt;/code&gt; role we&amp;rsquo;ll look at in the next chapter.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/global_preparation/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Set timezone to Europe/London
  timezone:
    name: &amp;#34;Europe/London&amp;#34;

- name: Update apt cache and install some packages
  apt:
    name: &amp;#34;{{ item }}&amp;#34;
    state: &amp;#34;latest&amp;#34;
    update_cache: yes
  with_items:
    - &amp;#34;containerd&amp;#34;
    - &amp;#34;docker-compose&amp;#34;
    - &amp;#34;docker.io&amp;#34;
    - &amp;#34;gpg&amp;#34;
    - &amp;#34;htop&amp;#34;
    - &amp;#34;neovim&amp;#34;
    - &amp;#34;postgresql-client&amp;#34;
    - &amp;#34;python3-docker&amp;#34;
    - &amp;#34;ssl-cert&amp;#34;

- name: Add .bashrc to /etc/skel
  copy:
    src: &amp;#34;.bashrc&amp;#34;
    dest: &amp;#34;/etc/skel/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add .bashrc to /root/
  copy:
    src: &amp;#34;.bashrc&amp;#34;
    dest: &amp;#34;/root/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add .hushlogin to /etc/skel/
  copy:
    src: &amp;#34;.hushlogin&amp;#34;
    dest: &amp;#34;/etc/skel/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add .hushlogin /root/
  copy:
    src: &amp;#34;.hushlogin&amp;#34;
    dest: &amp;#34;/root/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0644&amp;#34;

- name: Add sudo-wheel to /etc/sudoers.d/
  copy:
    src: &amp;#34;sudo-wheel&amp;#34;
    dest: &amp;#34;/etc/sudoers.d/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Set /srv permissions
  file:
    dest: &amp;#34;/srv&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: &amp;#34;0700&amp;#34;
    state: &amp;#34;directory&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;ll very quickly dissect each task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first task sets the box&amp;rsquo;s timezone to London. Feel free to modify this if it&amp;rsquo;s not representative for you.&lt;/li&gt;
&lt;li&gt;The second task installs some packages that I use constantly; &lt;strong&gt;neovim&lt;/strong&gt; as a text editor, &lt;strong&gt;htop&lt;/strong&gt; in case we need to monitor system resources, and &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Third and fourth tasks add a custom &lt;strong&gt;.bashrc&lt;/strong&gt; I made for this specific project, I&amp;rsquo;ll show it below. The file gets added to &lt;code&gt;/etc/skel&lt;/code&gt; and &lt;code&gt;/root&lt;/code&gt; on the third and fourth tasks respectively. Read about &lt;a href=&#34;https://www.thegeekdiary.com/understanding-the-etc-skel-directory-in-linux&#34;&gt;skel&lt;/a&gt; here if you don&amp;rsquo;t know what it&amp;rsquo;s for.&lt;/li&gt;
&lt;li&gt;The fifth and sixth tasks do the exact same as the previous two, but with the &lt;code&gt;.hushlogin&lt;/code&gt; file, this file is only there to prevent useless drivel displayed on the terminal when login into the box through &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The seventh task adds the file &lt;code&gt;sudo-wheel&lt;/code&gt; into &lt;code&gt;/etc/sudoers.d&lt;/code&gt;, this file allows every member of the &lt;strong&gt;wheel&lt;/strong&gt; group to perform sudo actions without having to provide a password.&lt;/li&gt;
&lt;li&gt;Lastly, the eighth task sets 700 ugo permission to &lt;code&gt;/srv&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to put the files being copied in a location where &lt;strong&gt;Ansible&lt;/strong&gt; can read them to transfer them to our boxes.&lt;br&gt;
This is what the &lt;code&gt;files&lt;/code&gt; directory we ommited earlier is for.&lt;br&gt;
I&amp;rsquo;ll &lt;strong&gt;cat&lt;/strong&gt; the files&amp;rsquo; contents, create each of them inside this directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat files/.bashrc&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# inputrc
shopt -s autocd expand_aliases
set -o vi
bind -m vi-command &amp;#39;Control-l: clear-screen&amp;#39;
bind -m vi-insert &amp;#39;Control-l: clear-screen&amp;#39;
set completion-ignore-case On
set show-mode-in-prompt off

# path
export PATH=/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:/bin

# editor
export EDITOR=nvim

# aliases
alias v=&amp;#39;nvim&amp;#39;
alias grep=&amp;#39;grep --color=auto&amp;#39;
alias ls=&amp;#39;ls --color=auto&amp;#39;
alias ll=&amp;#39;ls -lh&amp;#39;
alias la=&amp;#39;ls -ah&amp;#39;
alias lla=&amp;#39;ls -alh&amp;#39;
alias nets=&amp;#39;netstat -tulpn&amp;#39;
alias md=&amp;#39;mkdir -p&amp;#39;
alias tp=&amp;#39;htop&amp;#39;
alias dpurge=&amp;#39;docker stop $(docker ps -aq) &amp;amp;&amp;amp; docker rm $(docker ps -aq)&amp;#39;

# prompt
if [ $EUID -eq 0 ]; then
        export PS1=&amp;#34;\[\e[31m\]\u\[\e[m\]@\h:\[\e[34m\]\w\[\e[m\] \[\e[31m\]\\$\[\e[m\] &amp;#34;
        [[ $SSH_CONNECTION ]] &amp;amp;&amp;amp; export PS1=&amp;#34;\[\e[31m\]\u\[\e[m\]@\h:\[\e[34m\]\w\[\e[33m\] (ssh) \[\e[31m\]\\$\[\e[m\] &amp;#34;
else
        export PS1=&amp;#34;\[\e[32m\]\u\[\e[m\]@\h:\[\e[34m\]\w\[\e[m\] \[\e[32m\]\\$\[\e[m\] &amp;#34;
        [[ $SSH_CONNECTION ]] &amp;amp;&amp;amp; export PS1=&amp;#34;\[\e[32m\]\u\[\e[m\]@\h:\[\e[34m\]\w\[\e[33m\] (ssh) \[\e[32m\]\\$\[\e[m\] &amp;#34;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;m not going to go into detail about the contents of this since it&amp;rsquo;s basic &lt;strong&gt;Linux&lt;/strong&gt; stuff.&lt;br&gt;
It sets &lt;strong&gt;vi&lt;/strong&gt; keybinds for the shell, defines some aliases, sets the content of &lt;code&gt;$PATH&lt;/code&gt;, &lt;code&gt;$EDITOR&lt;/code&gt; and &lt;code&gt;$PROMPT&lt;/code&gt; (this last one is just for aesthetic purposes).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat sudo-wheel&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;%wheel ALL=(ALL) NOPASSWD: ALL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.hushlogin&lt;/code&gt; is just an empty file, we can simply &lt;strong&gt;touch&lt;/strong&gt; it and that&amp;rsquo;s enough.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ touch files/.hushlogin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the output of &lt;code&gt;tree -L 4 -a&lt;/code&gt; inside the &lt;strong&gt;Ansible&lt;/strong&gt; directory again, this time with the &lt;code&gt;files&lt;/code&gt; directory and the three files we just discussed inside it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ tree -L 4 -a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
├── ansible.cfg
├── files
│   ├── .bashrc
│   ├── .hushlogin
│   └── sudo-wheel
├── hosts
├── playbook.yml
└── roles
    ├── global_finalizing
    │   └── tasks
    │       └── main.yml
    └── global_preparation
        └── tasks
            └── main.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;first-run-of-the-playbook&#34;&gt;First run of the playbook&lt;/h2&gt;
&lt;p&gt;We should now be ready to run our &lt;strong&gt;Ansible&lt;/strong&gt; playbook for the first time against the three VMs we have prepared. It won&amp;rsquo;t do much for now other than install some packages and set some custom shell parameters, but we&amp;rsquo;re going to be using &lt;strong&gt;Ansible&lt;/strong&gt; a lot throughout this write-up so it is important to have the fundamentals working quickly.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ansible-playbook playbook.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let &lt;strong&gt;Ansible&lt;/strong&gt; run, once it finishes read the output to see if there were any errors or anything else.&lt;br&gt;
Afterwards, &lt;strong&gt;ssh&lt;/strong&gt; into any of the boxes and make sure your changes were applied, it will be readily apparent because the prompt will be different.&lt;/p&gt;
&lt;h2 id=&#34;certificate-authority&#34;&gt;Certificate Authority&lt;/h2&gt;
&lt;p&gt;We will be using &lt;strong&gt;TLS&lt;/strong&gt; to encrypt the traffic at the application level whenever possible throughout this write-up (always) because duhh; so we&amp;rsquo;ll need to create a Certificate Authority and certificates for every service deployed.&lt;br&gt;
Explanations about &lt;strong&gt;SSL/TLS&lt;/strong&gt; and certificates are way out of scope for what I&amp;rsquo;m writing so I&amp;rsquo;ll just assume anyone reading is at least somewhat familiar with how a &lt;strong&gt;PKI&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;We could do it perfectly fine using &lt;strong&gt;OpenSSL&lt;/strong&gt; but there&amp;rsquo;s a wrapper for it that makes it slightly more convenient, &lt;a href=&#34;https://github.com/square/certstrap&#34;&gt;certstrap&lt;/a&gt;. Follow the link, download it and compile it (read the source code first if you&amp;rsquo;re inclined to do so).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s generate our Certificate Authority:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ./certstrap init --common-name &amp;quot;pygrn.lab-CA&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These certificate files will be inside a directory called &lt;strong&gt;out&lt;/strong&gt; within the &lt;code&gt;certstrap&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Everytime we deploy a new service we&amp;rsquo;ll come back and generate a certificate for it using &lt;strong&gt;certstrap&lt;/strong&gt;.&lt;br&gt;
Copy (or move) these files into &lt;code&gt;path/to/ansible/files/CA/&lt;/code&gt; now and after creating every new one.&lt;/p&gt;
&lt;p&gt;Also let&amp;rsquo;s append these lines into the &lt;code&gt;global_preparation&lt;/code&gt; role so it creates a dedicated directory in each VM for us to store our certificates and to copy our certificate authority into it, as well as adding our CA file into the machine&amp;rsquo;s trusted cert store:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: Set /etc/ssl/pygrn.lab permissions
  file:
    state: &amp;#34;directory&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0775&amp;#34;

- name: Copy pygrn.lab-CA.crt into /etc/ssl/pygrn.lab/
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/etc/ssl/pygrn.lab/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0664&amp;#34;

- name: Copy pygrn.lab-CA.crt into /usr/local/share/ca-certificates/
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/usr/local/share/ca-certificates/&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;ssl-cert&amp;#34;
    mode: &amp;#34;0664&amp;#34;
  register: &amp;#34;certf&amp;#34;

- name: Update ca-certificates if pygrn.lab-CA.crt is added
  when: &amp;#34;certf.changed&amp;#34;
  command:
    cmd: &amp;#34;update-ca-certificates&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;integrating-docker-with-ansible&#34;&gt;Integrating Docker with Ansible&lt;/h2&gt;
&lt;p&gt;If everything we have done up to this point has worked well we should now be ready to start using &lt;strong&gt;Ansible&lt;/strong&gt; to spin up &lt;strong&gt;Docker&lt;/strong&gt; containers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note to the reader:&lt;/strong&gt; If this is your first time using &lt;strong&gt;Ansible&lt;/strong&gt; then the previous sentence couldn&amp;rsquo;t be any further away from the truth, I expect no total novices will stomach much of what I&amp;rsquo;m writing here; but in case you are in fact a novice and have the inclination to follow along with this write-up, it would probably be better to pause this project and play with &lt;strong&gt;Ansible&lt;/strong&gt; (and maybe &lt;strong&gt;Docker&lt;/strong&gt; too) for a couple weeks before continuing. Personally, I learned a lot about it by making a playbook which deploys my personal dotfiles to all my boxes (desktop, laptop and a bunch of servers including headless VPSs) I recommend people starting out to do something similar.&lt;/p&gt;
&lt;p&gt;Or you can completely disregard what I just said and follow along as best you can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve waited until this point to acknowledge that our second and third virtual machines have very similar names, this is because they will be running a master/master &lt;strong&gt;LDAP&lt;/strong&gt; authentication server pair (they could have literally any name, I just chose to name them like so to keep them visually related). Having this in mind we will deploy a front-end &lt;strong&gt;PHP&lt;/strong&gt; webapp to manage &lt;strong&gt;LDAP&lt;/strong&gt; servers to the first box (&lt;strong&gt;doris&lt;/strong&gt;), we&amp;rsquo;ll do most of our setup from the terminal anyway but this webapp helps visualizing the way &lt;strong&gt;LDAP&lt;/strong&gt; works and inspecting its properties.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s create a certificate for our &lt;strong&gt;OpenLDAP&lt;/strong&gt; server and its &lt;strong&gt;PHP&lt;/strong&gt; front-end:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ./certstrap request-cert --common-name &amp;quot;openldap&amp;quot; --domain *.pygrn.lab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sign the certificate request with the certificate authority:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ./certstrap sign openldap --CA pygrn.lab-CA&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s worth noting that I used &lt;strong&gt;.pygrn.lab&lt;/strong&gt; as domain name for the certificate, this is what&amp;rsquo;s called a wildcard certificate and it means that it will be valid for every sub-domain of &lt;strong&gt;pygrn.lab&lt;/strong&gt;. So in actuality we could just use one certificate for every service if we wanted to, but I won&amp;rsquo;t be doing that.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s create a new role called &lt;code&gt;openldap&lt;/code&gt; and the &lt;code&gt;tasks/main.yml&lt;/code&gt; inside of it looking like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat roles/openldap/tasks/main.yml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
- name: Set /srv/phpLDAPadmin permissions
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/openldap&amp;#34;
    owner: &amp;#34;root&amp;#34;
    group: &amp;#34;root&amp;#34;
    mode: 0755
    state: &amp;#34;directory&amp;#34;

- name: Set /srv/phpLDAPadmin/certs permissions
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  file:
    dest: &amp;#34;/srv/phpLDAPadmin/certs&amp;#34;
    owner: &amp;#34;911&amp;#34;
    group: &amp;#34;911&amp;#34;
    mode: &amp;#34;0755&amp;#34;
    state: &amp;#34;directory&amp;#34;

- name: Copy pygrn.lab-CA.crt into /srv/phpLDAPadmin/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/pygrn.lab-CA.crt&amp;#34;
    dest: &amp;#34;/srv/phpLDAPadmin/certs/&amp;#34;
    owner: &amp;#34;33&amp;#34;
    group: &amp;#34;33&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Copy openldap.crt into /srv/phpLDAPadmin/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/openldap.crt&amp;#34;
    dest: &amp;#34;/srv/phpLDAPadmin/certs/&amp;#34;
    owner: &amp;#34;33&amp;#34;
    group: &amp;#34;33&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: Copy openldap.key into /srv/phpLDAPadmin/certs/
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  copy:
    src: &amp;#34;CA/openldap.key&amp;#34;
    dest: &amp;#34;/srv/phpLDAPadmin/certs/&amp;#34;
    owner: &amp;#34;33&amp;#34;
    group: &amp;#34;33&amp;#34;
    mode: &amp;#34;0600&amp;#34;

- name: phpLDAPadmin container
  when: &amp;#34;ansible_hostname == &amp;#39;doris&amp;#39;&amp;#34;
  docker_container:
    name: &amp;#39;phpLDAPadmin&amp;#39;
    restart_policy: &amp;#34;always&amp;#34;
    image: &amp;#39;osixia/phpldapadmin:latest&amp;#39;
    published_ports:
      - &amp;#34;6080:80&amp;#34;
    env:
      PHPLDAPADMIN_LDAP_HOSTS: &amp;#34;#PYTHON2BASH:[{&amp;#39;cutxn.pygrn.lab&amp;#39;: [{&amp;#39;server&amp;#39;: [{&amp;#39;tls&amp;#39;: True}]},{&amp;#39;login&amp;#39;: [{&amp;#39;bind_id&amp;#39;: &amp;#39;cn=admin,dc=pygrn,dc=lab&amp;#39;}]}]}, {&amp;#39;cutxo.pygrn.lab&amp;#39;: [{&amp;#39;server&amp;#39;: [{&amp;#39;tls&amp;#39;: True}]},{&amp;#39;login&amp;#39;:
[{&amp;#39;bind_id&amp;#39;: &amp;#39;cn=admin,dc=pygrn,dc=lab&amp;#39;}]}]}]&amp;#34;
      PHPLDAPADMIN_HTTPS: &amp;#34;false&amp;#34;
      PHPLDAPADMIN_LDAP_CLIENT_TLS: &amp;#34;true&amp;#34;
      PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: &amp;#34;demand&amp;#34;
      PHPLDAPADMIN_LDAP_CLIENT_TLS_CA_CRT_FILENAME: &amp;#34;pygrn.lab-CA.crt&amp;#34;
      PHPLDAPADMIN_LDAP_CLIENT_TLS_CRT_FILENAME: &amp;#34;postgresdb.crt&amp;#34;
      PHPLDAPADMIN_LDAP_CLIENT_TLS_KEY_FILENAME: &amp;#34;postgresdb.key&amp;#34;
    volumes:
      - &amp;#34;/etc/timezone:/etc/timezone:ro&amp;#34;
      - &amp;#34;/etc/localtime:/etc/localtime:ro&amp;#34;
      - &amp;#34;/srv/phpLDAPadmin/certs:/container/service/ldap-client/assets/certs&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The conditional directive &lt;code&gt;when: &amp;quot;ansible_hostname == &#39;doris&#39;&amp;quot;&lt;/code&gt; means a task will only run on the virtual machine whose hostname is &lt;strong&gt;doris&lt;/strong&gt;.&lt;br&gt;
The first few tasks create and set permissions for &lt;code&gt;/srv/phpLDAPadmin&lt;/code&gt; directory and copy the &lt;strong&gt;TLS&lt;/strong&gt; files we just created into it.&lt;br&gt;
With our files in place the next task defines a &lt;strong&gt;Docker&lt;/strong&gt; container called &lt;strong&gt;phpLDAPadmin&lt;/strong&gt;.&lt;br&gt;
The &lt;strong&gt;Docker&lt;/strong&gt; image being used is &lt;a href=&#34;https://github.com/osixia/docker-phpLDAPadmin&#34;&gt;docker-phpLDAPadmin&lt;/a&gt;.&lt;br&gt;
Read through every line to get a sense of how it&amp;rsquo;s done, feel free to change the port we&amp;rsquo;re mapping from the host (6080) to the container (80) to access the webapp.&lt;br&gt;
The environment variables of the container (&lt;strong&gt;env&lt;/strong&gt;) are used to define some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_HOSTS&lt;/code&gt;: Sets the hosts our &lt;strong&gt;PHP&lt;/strong&gt; front-end will connect to, these are our VMs two and three: &lt;strong&gt;cutxn&lt;/strong&gt; and &lt;strong&gt;cutxo&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_HTTPS&lt;/code&gt;: Disables https connectivity (it&amp;rsquo;s important to understand that https will be disabled from whichever computer we use to open this webapp in a browser and the entry point of the &lt;strong&gt;Docker&lt;/strong&gt; container. We are NOT disabling encryption. Moreover, if this environment was even remotely close to production and the packets to authenticate to this webapp had to go through the internet I would 100% put it behind an nginx reverse proxy; in which case it would still make sense to have this variable set to false since the packets would be routed through the loopback NIC or a Unix socket&amp;hellip; but I digress.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_CLIENT\_TLS&lt;/code&gt;: Enables TLS between the &lt;strong&gt;Docker&lt;/strong&gt; container running the webapp and the &lt;strong&gt;LDAP&lt;/strong&gt; servers we will spin up next.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT&lt;/code&gt;: Makes it so that &lt;strong&gt;TLS&lt;/strong&gt; certificates are strictly checked against the certificate authority.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_CLIENT_TLS_CA_CRT_FILENAME&lt;/code&gt;: Name of the certificate authority file (earlier in the role it gets copied into &lt;code&gt;/srv/phpADMIN/certs&lt;/code&gt; and that directory gets mounted as a volume to the container in &lt;code&gt;/container/service/ldap-client/assets/certs&lt;/code&gt;. Files in this location can be input here without full path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_CLIENT_TLS_CRT_FILENAME&lt;/code&gt;: Same as above but for the certificate file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PHPLDAPADMIN_LDAP_CLIENT_TLS_KEY_FILENAME&lt;/code&gt;: Same thing, key file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to append some lines to our &lt;code&gt;playbook.yml&lt;/code&gt; file, it should look like this altogether:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- name: &amp;#34;Preparation&amp;#34;
  hosts: all
  roles:
    - &amp;#34;global_preparation&amp;#34;

- name: &amp;#34;OpenLDAP Server&amp;#34;
  hosts: ldap
  gather_facts: &amp;#34;no&amp;#34;
  roles:
    - &amp;#34;openldap&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And also let&amp;rsquo;s change the placeholder groups in our &lt;strong&gt;hosts&lt;/strong&gt; file for real ones, actually just one for now:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[ldap]
doris   ansible_host=192.168.122.2   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxn   ansible_host=192.168.122.3   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
cutxo   ansible_host=192.168.122.4   ansible_ssh_user=root   ansible_ssh_private_key_file=/path/to/ssh/key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These changes put our three VMs in a group called &lt;strong&gt;ldap&lt;/strong&gt;. We do this because the second play in our playbook will only run on the members of the group &lt;strong&gt;ldap&lt;/strong&gt;. This is not particularly important right now since we only have three VMs and they all have to do with the &lt;strong&gt;openldap&lt;/strong&gt; role, but later on when we deploy more services through different roles it will become very useful to segregate hosts like this.&lt;/p&gt;
&lt;p&gt;Once this is all in place let&amp;rsquo;s run our playbook again:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ansible-playbook playbook.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming the playbook ran properly we can now access &lt;strong&gt;phpLDAPadmin&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To do this I&amp;rsquo;m going to create an &lt;strong&gt;ssh&lt;/strong&gt; tunnel from my desktop computer where I&amp;rsquo;m working on all this to the virtual machine running inside my hypervisor. This is accomplished with a local port-forward like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh -L 6080:192.168.122.2:6080 root@[IP of hypervisor] -N&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we open a browser on our desktop, go to &lt;strong&gt;localhost:6080&lt;/strong&gt; and we should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking good so far. Right now we won&amp;rsquo;t be able to log into the &lt;strong&gt;LDAP&lt;/strong&gt; server because we haven&amp;rsquo;t configured it yet. In the next post we will setup the master/master replication pair we spoke of before.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 02 | Terraform and KVM</title>
		<link>http://efym.net/blog/sysadmin-playground02-terraform-kvm/</link>
		<pubDate>Tue, 13 Jul 2021 01:02:51 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground02-terraform-kvm/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;h2 id=&#34;visualizing-the-topology&#34;&gt;Visualizing the topology&lt;/h2&gt;
&lt;p&gt;By the end of this post our infrastructure should look like this diagram, we&amp;rsquo;ll only be working with 3 VMs for now and we will set up the rest in a later post; at the very least it should be identical from the hypervisor and downstream.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/sysadmin-playground/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;setup-terraform-to-work-with-the-libvirt-provider&#34;&gt;Setup Terraform to work with the libvirt provider&lt;/h2&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt; into the box serving as the KVM hypervisor; mine is my homeserver running Debian.&lt;/p&gt;
&lt;p&gt;Make a directory which will hold all the files we&amp;rsquo;re going to work with.&lt;/p&gt;
&lt;p&gt;In order to use the &lt;a href=&#34;https://github.com/dmacvicar/terraform-provider-libvirt&#34;&gt;libvirt provider&lt;/a&gt; we need to define it within &lt;strong&gt;Terraform&lt;/strong&gt;&amp;rsquo;s environment. For this we make a dedicated file called &lt;strong&gt;providers.tf&lt;/strong&gt; which looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat providers.tf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform {
  required_providers {
    libvirt = {
      source = &amp;#34;dmacvicar/libvirt&amp;#34;
    }
  }
}

provider &amp;#34;libvirt&amp;#34; {
uri = &amp;#34;qemu:///system&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ terraform init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will download the provider and our &lt;strong&gt;Terraform&lt;/strong&gt; environment will be initialized.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a bug with &lt;strong&gt;AppArmor&lt;/strong&gt; templates and &lt;strong&gt;KVM/Qemu&lt;/strong&gt; regarding ownership of the hypervisor volumes, we can get around it by appending a line to &lt;code&gt;/etc/libvirt/qemu.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ echo &#39;security_driver = &amp;quot;none&amp;quot;&#39; &amp;gt;&amp;gt; /etc/libvirt/qemu.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;terraform-configuration-file-for-first-box&#34;&gt;Terraform configuration file for first box&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s grab a cloud-ready image, I&amp;rsquo;m using &lt;a href=&#34;https://cloud.debian.org/images/cloud/bullseye/daily/latest/debian-11-genericcloud-amd64-daily.qcow2&#34;&gt;Debian 11 (Bullseye)&lt;/a&gt;. This is a qcow2 cloud image which boots straight into Debian without needing any installation. In order to set the root password, &lt;strong&gt;ssh&lt;/strong&gt; authentication keys and hostname we will use &lt;strong&gt;cloud-init&lt;/strong&gt; which is nicely supported by our &lt;strong&gt;Terraform&lt;/strong&gt; libvirt provider. But first let&amp;rsquo;s create the &lt;strong&gt;Terraform&lt;/strong&gt; file for our first box.&lt;/p&gt;
&lt;p&gt;I name the files after the boxes hostnames I plan to use, this first one we&amp;rsquo;ll name &lt;strong&gt;doris&lt;/strong&gt;. So we create &lt;code&gt;doris.tf&lt;/code&gt; looking like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat doris.tf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;resource &amp;#34;libvirt_volume&amp;#34; &amp;#34;doris&amp;#34; {
  name = &amp;#34;doris&amp;#34;
  pool = &amp;#34;default&amp;#34;
  source = &amp;#34;https://cloud.debian.org/images/cloud/bullseye/daily/latest/debian-11-generic-amd64-daily.qcow2&amp;#34;
  format = &amp;#34;qcow2&amp;#34;
}

resource &amp;#34;libvirt_cloudinit_disk&amp;#34; &amp;#34;commoninit-doris&amp;#34; {
          name = &amp;#34;commoninit-doris.iso&amp;#34;
          pool = &amp;#34;default&amp;#34;
          user_data = &amp;#34;${data.template_file.user_data-doris.rendered}&amp;#34;
        }

data &amp;#34;template_file&amp;#34; &amp;#34;user_data-doris&amp;#34; {
  template = &amp;#34;${file(&amp;#34;${path.module}/cloud_inits/cloud_init-doris.cfg&amp;#34;)}&amp;#34;
}

resource &amp;#34;libvirt_domain&amp;#34; &amp;#34;doris&amp;#34; {
  name = &amp;#34;doris&amp;#34;
  memory = &amp;#34;512&amp;#34;
  vcpu = 1

  cloudinit = &amp;#34;${libvirt_cloudinit_disk.commoninit-doris.id}&amp;#34;

  network_interface {
    network_name = &amp;#34;default&amp;#34;
        mac = &amp;#34;52:54:00:8f:52:f2&amp;#34;
  }

  disk {
       volume_id = &amp;#34;${libvirt_volume.doris.id}&amp;#34;
  }

  console {
    type        = &amp;#34;pty&amp;#34;
    target_port = &amp;#34;0&amp;#34;
    target_type = &amp;#34;serial&amp;#34;
  }

  console {
        type = &amp;#34;pty&amp;#34;
        target_type = &amp;#34;virtio&amp;#34;
        target_port = &amp;#34;1&amp;#34;
  }

  graphics {
    type = &amp;#34;vnc&amp;#34;
    listen_type = &amp;#34;address&amp;#34;
    autoport = &amp;#34;true&amp;#34;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Feel free to adjust the virtual CPU cores and amount of RAM for the box.&lt;/p&gt;
&lt;h2 id=&#34;cloud-init&#34;&gt;Cloud-init&lt;/h2&gt;
&lt;p&gt;As mentioned above we need to set up &lt;strong&gt;cloud-init&lt;/strong&gt; to configure password and &lt;strong&gt;ssh&lt;/strong&gt;-based authentication on the boxes. Each box will have its own &lt;strong&gt;cloud-init&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll make a directory to hold these files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ mkdir cloud_inits&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inside this directory we&amp;rsquo;ll create &lt;code&gt;cloud_init-doris.cfg&lt;/code&gt; (the name is important since this is the name we&amp;rsquo;re referencing in &lt;code&gt;doris.tf&lt;/code&gt;, you may change it to whatever scheme you want but you&amp;rsquo;ll also need to change the referencing in the &lt;strong&gt;Terraform&lt;/strong&gt; file) the file should look like the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cat cloud_inits/cloud_init-doris.cfg&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#cloud-config
# vim: syntax=yaml
users:
  - name: root
    ssh_authorized_keys:
       - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOY/U6D5FZ54e+PQqZ2j6DtBsqqm3LTa19e99KoiPduZ

ssh_pwauth: True
chpasswd:
  list: |
     root:nyaa
  expire: False
disable_root: false

growpart:
  mode: auto
  devices: [&amp;#39;/&amp;#39;]

runcmd:
 - sed  -i &amp;#39;/PermitRootLogin/s/.*/PermitRootLogin without-password/&amp;#39; /etc/ssh/sshd_config
 - systemctl restart sshd
 - hostnamectl set-hostname doris.pygrn.lab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change the entry under &lt;strong&gt;ssh_authorized_keys&lt;/strong&gt; to reflect your ssh public key, change the entry under &lt;strong&gt;chpasswd&lt;/strong&gt; to whatever password you want root to have, I&amp;rsquo;m simply using &amp;lsquo;&lt;strong&gt;nyaa&lt;/strong&gt;&amp;rsquo; because this network is an internal playground and won&amp;rsquo;t be accessible from outside my LAN; but one should NEVER use such a simplistic password for a root user (or any other user for that matter) in a production environment.&lt;/p&gt;
&lt;p&gt;The entries under &lt;strong&gt;runcmd&lt;/strong&gt; do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first entry modifies &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; to allow root login through &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The second one restart the &lt;strong&gt;ssh&lt;/strong&gt; daemon to apply the changes.&lt;/li&gt;
&lt;li&gt;The third one sets the box&amp;rsquo;s hostname. The hostname is a FQDN, this is especially important because we&amp;rsquo;ll be setting up DNS zones in shortly as well as static IP addresses at the hypervisor level among other things later.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copy the boxes file configuration and modify its file name and name of VM to create a different VM Terraform file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cp doris.tf cutxn.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/doris/cutxn/g&#39; cutxn.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And again for a third VM:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cp doris.tf cutxo.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/doris/cutxo/g&#39; cutxo.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will also change the MAC addresses of the second and third boxes to something different so they don&amp;rsquo;t interfere with each other on the network:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/mac = &amp;quot;52:54:00:8f:52:f2&amp;quot;/mac = &amp;quot;52:54:00:8f:53:f3&amp;quot;/g&#39; cutxn.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/mac = &amp;quot;52:54:00:8f:52:f2&amp;quot;/mac = &amp;quot;52:54:00:8f:54:f4&amp;quot;/g&#39; cutxo.tf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we do the same for the cloud-init files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cp cloud_inits/cloud_init-doris.cfg cloud_inits/cloud_init-cutxn.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/doris/cutxn/g&#39; cloud_inits/cloud_init-cutxn.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Third file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cp cloud_inits/cloud_init-doris.cfg cloud_inits/cloud_init-cutxo.cfg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sed -i &#39;s/doris/cutxo/g&#39; cloud_inits/cloud_init-cutxo.cfg&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;kvm-hypervisor-dns-configuration&#34;&gt;KVM hypervisor DNS configuration&lt;/h2&gt;
&lt;p&gt;In order to set up a local DNS zone and static IPs for our virtual machines we will edit the default KVM network:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ virsh net-edit --network default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll add the following lines to the configuration file:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here&amp;rsquo;s my complete configuration after applying the changes as an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;network&amp;gt;
  &amp;lt;name&amp;gt;default&amp;lt;/name&amp;gt;
  &amp;lt;uuid&amp;gt;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;lt;/uuid&amp;gt;
  &amp;lt;forward mode=&amp;#39;nat&amp;#39;/&amp;gt;
  &amp;lt;bridge name=&amp;#39;virbr0&amp;#39; stp=&amp;#39;on&amp;#39; delay=&amp;#39;0&amp;#39;/&amp;gt;
  &amp;lt;mac address=&amp;#39;52:54:00:b4:81:a8&amp;#39;/&amp;gt;
  &amp;lt;domain name=&amp;#39;pygrn.lab&amp;#39; localOnly=&amp;#39;yes&amp;#39;/&amp;gt;
  &amp;lt;ip address=&amp;#39;192.168.122.1&amp;#39; netmask=&amp;#39;255.255.255.0&amp;#39;&amp;gt;
    &amp;lt;dhcp&amp;gt;
      &amp;lt;range start=&amp;#39;192.168.122.2&amp;#39; end=&amp;#39;192.168.122.254&amp;#39;/&amp;gt;
      &amp;lt;host mac=&amp;#39;52:54:00:8f:52:f2&amp;#39; name=&amp;#39;doris.pygrn.lab&amp;#39; ip=&amp;#39;192.168.122.2&amp;#39;/&amp;gt;
      &amp;lt;host mac=&amp;#39;52:54:00:8f:53:f3&amp;#39; name=&amp;#39;cutxn.pygrn.lab&amp;#39; ip=&amp;#39;192.168.122.3&amp;#39;/&amp;gt;
      &amp;lt;host mac=&amp;#39;52:54:00:8f:54:f4&amp;#39; name=&amp;#39;cutxo.pygrn.lab&amp;#39; ip=&amp;#39;192.168.122.4&amp;#39;/&amp;gt;
    &amp;lt;/dhcp&amp;gt;
  &amp;lt;/ip&amp;gt;
&amp;lt;/network&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Restart the KVM default network:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ virsh net-destroy --network default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ virsh net-start --network default&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;terraform-deployment&#34;&gt;Terraform deployment&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s check our configuration is working and see how it will be applied by &lt;strong&gt;Terraform&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ terraform plan&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Carefully read the output of this command as it indicates what &lt;strong&gt;Terraform&lt;/strong&gt; is going to do once we pull the trigger. Errors in configuration should also appear here if we have made any.&lt;/p&gt;
&lt;p&gt;Once happy with what the plan says, let&amp;rsquo;s actually deploy the boxes we specified in the configuration files we made:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ terraform apply&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;checking-the-infrastructure&#34;&gt;Checking the infrastructure&lt;/h2&gt;
&lt;p&gt;If everything went right we should now have three virtual machines with static (not really static, but the &lt;strong&gt;DHCP&lt;/strong&gt; server will give the same IP to the respective box every time) IP addresses and within the local DNS zone &lt;strong&gt;pygrn.lab&lt;/strong&gt;. We can do a network mapping scan to make sure everything is as expected:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ nmap -sn 192.168.122.0/24&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To test the DNS zone we can use &lt;strong&gt;dig&lt;/strong&gt; (contained in the &lt;strong&gt;bind9-dnsutils&lt;/strong&gt; package in Debian) pointing at the networking interface our virtual machines use as &lt;strong&gt;DHCP&lt;/strong&gt; and &lt;strong&gt;DNS&lt;/strong&gt; server. This gateway is a virtual network card created by KVM which has a &lt;strong&gt;dnsmasq&lt;/strong&gt; server instance attached to it. We&amp;rsquo;ll use &lt;code&gt;+noall +answer&lt;/code&gt; to filter the output so that it only shows us the section we&amp;rsquo;re interested in. Here&amp;rsquo;re the commands and their expected output:&lt;/p&gt;
&lt;p&gt;Forward DNS:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ dig +noall +answer doris.pygrn.lab @192.168.122.1&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;doris.pygrn.lab. 0 IN A 192.168.122.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reverse DNS:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ dig +noall +answer -x 192.168.122.2 @192.168.122.1&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;2.122.168.192.in-addr.arpa. 0 IN PTR doris.pygrn.lab.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the output of those commands matches the sample I&amp;rsquo;ve just given we then have a fully working DNS zone with forward and reverse lookups working for our three virtual machines.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now login into one the virtual machines through &lt;strong&gt;ssh&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh -i [/path/to/ssh/key] root@192.168.122.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;[path/to/ssh/key]&lt;/code&gt; after the &lt;strong&gt;-i&lt;/strong&gt; switch refers to the path in the computer serving as the hypervisor where the private key which corresponds to the public key we set up in the &lt;strong&gt;cloud_inits&lt;/strong&gt; is stored. You should now have a bash prompt in the machine called &lt;strong&gt;doris&lt;/strong&gt;.&lt;br&gt;
From here we can check our &lt;strong&gt;DNS&lt;/strong&gt; settings as well if we wanted to; I&amp;rsquo;ll drop a screengrab with a couple commands I ran to do it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/blog/img/sysadmin-playground2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the next chapter we&amp;rsquo;ll do further configuration using &lt;strong&gt;Ansible&lt;/strong&gt; and set up our first service with &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Sysadmin Playground Part 01 | Intro</title>
		<link>http://efym.net/blog/sysadmin-playground01-intro/</link>
		<pubDate>Tue, 06 Jul 2021 21:29:23 +0100</pubDate>
		
		<guid>http://efym.net/blog/sysadmin-playground01-intro/</guid>
		<description>&lt;p&gt;Recreation of a lab environment with Terraform and Ansible.&lt;/p&gt;
&lt;hr&gt;
&lt;strong&gt;This post is part of a series, follow the links to the other parts:&lt;/strong&gt;
&lt;br&gt;


&lt;a href=&#34;http://efym.net/blog/sysadmin-playground01-intro/&#34;&gt;Sysadmin Playground Part 01 | Intro&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground02-terraform-kvm/&#34;&gt;Sysadmin Playground Part 02 | Terraform and KVM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground03-ansible-docker/&#34;&gt;Sysadmin Playground Part 03 | Ansible and Docker&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground04-openldap/&#34;&gt;Sysadmin Playground Part 04 | OpenLDAP&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground05-passwords-ansible-vault/&#34;&gt;Sysadmin Playground Part 05 | Passwords and Ansible Vault&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground06-centralized-logs/&#34;&gt;Sysadmin Playground Part 06 | Centralized Logs&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground07-email/&#34;&gt;Sysadmin Playground Part 07 | E-mail&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://efym.net/blog/sysadmin-playground08-nfs/&#34;&gt;Sysadmin Playground Part 08 | NFS&lt;/a&gt;&lt;br&gt;


&lt;hr&gt;
&lt;p&gt;Recently I came accross a 6 years old post on reddit wherein a person described what he thought were the most important areas of enterprise Linux systems administration, I decided to recreate it. Since I haven&amp;rsquo;t worked much with enterprise software this will be both fun and challenging for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&#34;https://teddit.net/r/linuxadmin/comments/2s924h/how_did_you_get_your_start/cnnw1ma/&#34;&gt;How did you get your start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These are the words from his post:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This is what I tell people to do, who ask me &amp;#34;how do I learn to be a Linux sysadmin?&amp;#34;.  
1) Set up a KVM hypervisor.  
2) Inside of that KVM hypervisor, install a Spacewalk server. Use CentOS 6 as the distro for all work below. (For bonus points, set up errata importation on the CentOS channels, so you can properly see security update advisory information.)  
3) Create a VM to provide named and dhcpd service to your entire environment. Set up the dhcp daemon to use the Spacewalk server as the pxeboot machine (thus allowing you to use Cobbler to do unattended OS installs). Make sure that every forward zone you create has a reverse zone associated with it. Use something like &amp;#34;internal.virtnet&amp;#34; (but not &amp;#34;.local&amp;#34;) as your internal DNS zone.  
4) Use that Spacewalk server to automatically (without touching it) install a new pair of OS instances, with which you will then create a Master/Master pair of LDAP servers. Make sure they register with the Spacewalk server. Do not allow anonymous bind, do not use unencrypted LDAP.  
5) Reconfigure all 3 servers to use LDAP authentication.  
6) Create two new VMs, again unattendedly, which will then be Postgresql VMs. Use pgpool-II to set up master/master replication between them. Export the database from your Spacewalk server and import it into the new pgsql cluster. Reconfigure your Spacewalk instance to run off of that server.  
7) Set up a Puppet Master. Plug it into the Spacewalk server for identifying the inventory it will need to work with. (Cheat and use ansible for deployment purposes, again plugging into the Spacewalk server.)  
8) Deploy another VM. Install iscsitgt and nfs-kernel-server on it. Export a LUN and an NFS share.  
9) Deploy another VM. Install bakula on it, using the postgresql cluster to store its database. Register each machine on it, storing to flatfile. Store the bakula VM&amp;#39;s image on the iscsi LUN, and every other machine on the NFS share.  
10) Deploy two more VMs. These will have httpd (Apache2) on them. Leave essentially default for now.  
11) Deploy two more VMs. These will have tomcat on them. Use JBoss Cache to replicate the session caches between them. Use the httpd servers as the frontends for this. The application you will run is JBoss Wiki.  
12) You guessed right, deploy another VM. This will do iptables-based NAT/round-robin loadbalancing between the two httpd servers.  
13) Deploy another VM. On this VM, install postfix. Set it up to use a gmail account to allow you to have it send emails, and receive messages only from your internal network.  
14) Deploy another VM. On this VM, set up a Nagios server. Have it use snmp to monitor the communication state of every relevant service involved above. This means doing a &amp;#34;is the right port open&amp;#34; check, and a &amp;#34;I got the right kind of response&amp;#34; check and &amp;#34;We still have filesystem space free&amp;#34; check.  
15) Deploy another VM. On this VM, set up a syslog daemon to listen to every other server&amp;#39;s input. Reconfigure each other server to send their logging output to various files on the syslog server. (For extra credit, set up logstash or kibana or greylog to parse those logs.)  
16) Document every last step you did in getting to this point in your brand new Wiki.  
17) Now go back and create Puppet Manifests to ensure that every last one of these machines is authenticating to the LDAP servers, registered to the Spacewalk server, and backed up by the bakula server.  
18) Now go back, reference your documents, and set up a Puppet Razor profile that hooks into each of these things to allow you to recreate, from scratch, each individual server.  
19) Destroy every secondary machine you&amp;#39;ve created and use the above profile to recreate them, joining them to the clusters as needed.  
20) Bonus exercise: create three more VMs. A CentOS 5, 6, and 7 machine. On each of these machines, set them up to allow you to create custom RPMs and import them into the Spacewalk server instance. Ensure your Puppet configurations work for all three and produce like-for-like behaviors.  
Do these things and you will be fully exposed to every aspect of Linux Enterprise systems administration. Do them well and you will have the technical expertise required to seek &amp;#34;Senior&amp;#34; roles. If you go whole-hog crash-course full-time it with no other means of income, I would expect it would take between 3 and 6 months to go from &amp;#34;I think I&amp;#39;m good with computers&amp;#34; to achieving all of these -- assuming you&amp;#39;re not afraid of IRC and google (and have neither friends nor family ...).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a number of caveats because of the age of the post. Some of the software mentioned here has reached—or is about to reach—EOL (namely &lt;strong&gt;Spacewalk&lt;/strong&gt; and &lt;strong&gt;CentOS&lt;/strong&gt;). Also for my recreation I will make some changes based on my own personal preference and familiarity with alternatives.&lt;/p&gt;
&lt;h2 id=&#34;here-are-some-of-the-changes-im-planning-to-make&#34;&gt;Here are some of the changes I&amp;rsquo;m planning to make:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt; with cloud-init instead of &lt;strong&gt;Spacewalk&lt;/strong&gt;.&lt;br&gt;
At first I thought about using &lt;strong&gt;Foreman&lt;/strong&gt; as an alternative to &lt;strong&gt;Spacewalk&lt;/strong&gt; but it seemed unnecesarily bloated, not to mention if I use containers for most things and &lt;strong&gt;Terraform&lt;/strong&gt; to manage the VMs I don&amp;rsquo;t really need &lt;strong&gt;pxeboot&lt;/strong&gt;; it could still be used but doesn&amp;rsquo;t seem worth it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; containers instead of &lt;strong&gt;VMs&lt;/strong&gt; for some services.&lt;br&gt;
&lt;strong&gt;Docker&lt;/strong&gt; containers carry much less overhead than full blown &lt;strong&gt;VMs&lt;/strong&gt; and I&amp;rsquo;m planning to host all of this on my homeserver which isn&amp;rsquo;t near close to enterprise hardware plus it&amp;rsquo;s already running personal services of mine. Also I understand they&amp;rsquo;re used nowadays in most enterprise infrastructures I know of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Debian&lt;/strong&gt; instead of &lt;strong&gt;CentOS&lt;/strong&gt;.&lt;br&gt;
Never been a fan of &lt;strong&gt;CentOS&lt;/strong&gt; or &lt;strong&gt;RHEL&lt;/strong&gt; (and most recently &lt;strong&gt;Rocky Linux&lt;/strong&gt;), I know they&amp;rsquo;re enterprise standards but I much, much prefer &lt;strong&gt;Debian&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; instead of &lt;strong&gt;Puppet&lt;/strong&gt;.&lt;br&gt;
I&amp;rsquo;m very familiar with &lt;strong&gt;Ansible&lt;/strong&gt;, I&amp;rsquo;ve used it in various different deployments. I like that it doesn&amp;rsquo;t require a daemon running on the clients and instead uses ssh with a Python backend. Maybe I&amp;rsquo;ll try to recreate the configuration with &lt;strong&gt;Puppet&lt;/strong&gt; in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nginx&lt;/strong&gt; instead of &lt;strong&gt;Apache2&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there will possibly be other changes which I&amp;rsquo;ll try to document as I go (this post probably will also be updated periodically).&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Voidlinux Install</title>
		<link>http://efym.net/blog/voidlinux-install/</link>
		<pubDate>Thu, 01 Jul 2021 19:09:10 +0100</pubDate>
		
		<guid>http://efym.net/blog/voidlinux-install/</guid>
		<description>&lt;p&gt;Notes on my Void Linux setup.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Recently I switched the linux distribution I use on my desktop and laptop to Void from Arch. I had used Void before but switched away from it because there were some packages I use missing from their repositories. That point hasn&amp;rsquo;t really changed much, but I thought I&amp;rsquo;d give it another go anyway.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There&amp;rsquo;s a guide on the &lt;a href=&#34;https://docs.voidlinux.org/installation/guides/fde.html&#34;&gt;Void Linux docs&lt;/a&gt; page about an installation with encrypted boot, I personally choose to leave my boot partition unencrypted because I think it&amp;rsquo;s largely useless to do it; and also because the Grub bootloader doesn&amp;rsquo;t support luks2 scheme so you&amp;rsquo;re forced to use luks1 which I&amp;rsquo;m uncomfortable with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use an ISO keyboard with a uk layout, I&amp;rsquo;m also a heavy vim user so a lot of of the desicions I make are personal preference, YMMV. Here&amp;rsquo;s how I set it up:&lt;/p&gt;
&lt;p&gt;Firstly boot the live iso image into the box you&amp;rsquo;re doing the installation on (won&amp;rsquo;t cover that since it&amp;rsquo;s fairly obvious) and login as root.&lt;/p&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Sets TERM variable (especially useful if doing this through ssh) and vim mode for the shell&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # export TERM=xterm-256color
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # alias v=nvim
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # set -o vi
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # bind -m vi-command &amp;#39;Control-l: clear-screen&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # bind -m vi-insert &amp;#39;Control-l: clear-screen&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change keycode 58 = Escape to make Caps Lock key act as Escape because it&amp;rsquo;s $currentyear&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # v /usr/share/kbd/keymaps/i386/qwerty/uk.map.gz
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # loadkeys uk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ping any website to check internet connection&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # ping gnu.org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check whether you&amp;rsquo;re booted into uefi or bios&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # ls /sys/firmware/efi/efivars
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;partitions&#34;&gt;Partitions&lt;/h2&gt;
&lt;p&gt;Create 2 partitions on your drive (first one is just for /boot so I always make it 1GB, which is plenty). Encrypt the second one with LUKS&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # fdisk /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # cryptsetup luksFormat /dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # cryptsetup luksOpen /dev/sda2 [NAMEOFcrypt]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LVM setup&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # pvcreate /dev/mapper/[NAMEOFcrypt]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # vgcreate [NAMEOF-vg] /dev/mapper/[NAMEOFcrypt]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # lvcreate --name root -L 100G [NAMEOF-vg]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # lvcreate --name home -l 100%FREE [NAMEOF-vg]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Format the newly created partitions&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mkfs.vfat -F32 /dev/sda1
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mkfs.ext4 -L root /dev/[NAMEOF-vg]/root
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mkfs.ext4 -L home /dev/[NAMEOF-vg]/home
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mount the partitions&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mount /dev/[NAMEOF-vg]/root /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mkdir -p /mnt/{home,boot}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mount /dev/[NAMEOF-vg]/home /mnt/home
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # mount /dev/sda1 /mnt/boot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Mount dev proc sys and run in bind mode in order to chroot to /mnt&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # for dir in dev proc sys run; do mkdir -p /mnt/$dir; mount --rbind /$dir /mnt/$dir; mount --make-rslave /mnt/$dir; done
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;system-bootstrap-and-installation&#34;&gt;System bootstrap and installation&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # xbps-install -Sy -R https://alpha.de.repo.voidlinux.org/current -r /mnt base-system base-devel cryptsetup lvm2 neovim openssh connman connman-ncurses dbus-elogind python3 openntpd grub-x86_64-efi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Chroot into &lt;code&gt;/mnt&lt;/code&gt; and continue installation from there&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # chroot /mnt bash
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # chown root:root /
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # chmod 755 /
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo [NAMEOFbox] &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Modify hosts file to reflect new hostname&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # v /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Set your timezone, keyboard (I replace Caps_Lock to act as Escape again by setting keycode 58 = Escape), keymap, and locale&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # ln -fs /usr/share/zoneinfo/Europe/London /etc/localtime
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # v /usr/share/kbd/keymaps/i386/qwerty/uk.map.gz
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo &amp;#34;KEYMAP=uk&amp;#34; &amp;gt;&amp;gt; /etc/rc.conf
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo &amp;#34;LANG=en_GB.UTF-8&amp;#34; &amp;gt; /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo &amp;#34;en_GB.UTF-8 UTF-8&amp;#34; &amp;gt;&amp;gt; /etc/default/libc-locales
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # xbps-reconfigure -f glibc-locales
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;users-and-groups&#34;&gt;Users and groups&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # useradd -m -g wheel [NAMEOFuser]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # groupadd libvirt
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # usermod -a -G audio,video,libvirt,lp [NAMEOFuser]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # chown [NAMEOFuser]:wheel -R /home/[NAMEOFuser]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # chmod 700 /home/[NAMEOFuser]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # passwd [NAMEOFuser]
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # passwd root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;create-a-swapfile&#34;&gt;Create a swapfile&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # dd if=/dev/zero of=/var/swapfile count=8192 bs=1MiB
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # chmod 600 /var/swapfile
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # mkswap /var/swapfile 
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # swapon /var/swapfile
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;edit-your-fstab&#34;&gt;Edit your fstab&lt;/h2&gt;
&lt;p&gt;Use this command to add the UUID of sda1 into the fstab file&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # blkid -o value -s UUID /dev/sda1 &amp;gt;&amp;gt; /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your fstab should look like this&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/dev/[NAMEOF-vg]/root       /        ext4      defaults         0       0
/dev/[NAMEOF-vg]/home       /home    ext4      defaults         0       0
UUID=[UUIDOFsda1]           /boot    vfat      defaults         0       0
/var/swapfile               swap     swap      none             0       0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bootloader&#34;&gt;Bootloader&lt;/h2&gt;
&lt;p&gt;I use grub as my bootloader, feel free to use any alternatives you like here.&lt;/p&gt;
&lt;p&gt;Use this command if running uefi&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=&amp;#34;Void&amp;#34; /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use this one if running bios&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # grub-install --bootloader-id=&amp;#34;Void&amp;#34; /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use this command to add the UUID of the encrpyted partition /dev/sda2 into /etc/default/grub&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # blkid -o value -s UUID /dev/sda2 &amp;gt;&amp;gt; /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Modify &lt;code&gt;/etc/default/grub&lt;/code&gt; to look like the following (only need to change LINUX_DEFAULT line)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;loglevel=3 rd.auto=1 cryptdevice=UUID=[UUIDOFsda2]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update grub.cfg&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;finalizing&#34;&gt;Finalizing&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # rm /var/service/agetty-{tty3,tty4,tty5,tty6}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # ln -fs /etc/sv/{sshd,dbus,connmand,openntpd} /var/service/
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo &amp;#34;%wheel ALL=(ALL) NOPASSWD: ALL&amp;#34; &amp;gt;&amp;gt; /etc/sudoers.d/sudo-wheel
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # echo &amp;#34;[NAMEOFuser] hard nofile 524288&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Exit chroot, unmount drives and reboot&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chroot # exit
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # umount -R /mn
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@void-live:~ # reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Right now you should have a fully functioning Void install, I use an Ansible playbook which sets up my entire graphical environment, dotfiles and other things; maybe I&amp;rsquo;ll publish that soon.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>About Moderation</title>
		<link>http://efym.net/blog/about-moderation/</link>
		<pubDate>Fri, 14 May 2021 17:03:06 +0100</pubDate>
		
		<guid>http://efym.net/blog/about-moderation/</guid>
		<description>&lt;p&gt;About efym.net moderation.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I had a somewhat long ramble here publicly explaining some of my views on various things but I have decided to replace it with this short notice. Not because my views and opinions have changed (they haven&amp;rsquo;t) but because I want to keep &lt;strong&gt;efym.net&lt;/strong&gt; about Free Software and &lt;strong&gt;Linux&lt;/strong&gt; administration.&lt;br&gt;
I do not want to participate in the many discussions taking place around the technology world which aren&amp;rsquo;t to do with the subject of technology itself because frankly, I don&amp;rsquo;t care.&lt;/p&gt;
&lt;p&gt;So if you&amp;rsquo;re interested in what kind of moderation I do on my &lt;strong&gt;Matrix&lt;/strong&gt; homeserver and whatever other services I may offer here&amp;rsquo;s the list of my criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Absolutely &lt;strong&gt;zero&lt;/strong&gt; child pornography of any kind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it. Everything else is okay.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Digital Diseases</title>
		<link>http://efym.net/blog/digital-diseases/</link>
		<pubDate>Tue, 04 May 2021 20:10:47 +0100</pubDate>
		
		<guid>http://efym.net/blog/digital-diseases/</guid>
		<description>&lt;p&gt;A few thoughts on why social media is a cancerous institution.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Every single person on the face of the earth thinks they&amp;rsquo;re special, different from the rest and that their motives are so intricate and complex nobody could possibly decipher them.&lt;/p&gt;
&lt;p&gt;Modern data-aggregation empirically throws these unfounded thoughts right out of the window.&lt;/p&gt;
&lt;p&gt;Many years ago there was a &amp;ldquo;viral&amp;rdquo; story around the internet which depicted a man furiously wanting to sue Target (the US supermarket chain) for sending his daughter coupons for pregnancy paraphernalia; such as baby clothes and cribs. The man was angry because he thought the store was encouraging his daughter the become pregnant. This same man later on issued an apology to the store when it came to light his daughter was in fact actually pregnant. Target had figured this out by analyzing a sudden change in the girl&amp;rsquo;s shopping habbits. These weren&amp;rsquo;t real people looking at what she bought and what it meant, it was just an algorithm which iterates through every customer and every purchase and finds relations and meanings.&lt;/p&gt;
&lt;p&gt;That anectode is not an issolated incident and it&amp;rsquo;s happening daily everywhere in the world. To everyone. Big corporations aggregate all the data at their disposals to make assumptions, minimize risks and just plain predict what their customers want even before they themselves do.&lt;/p&gt;
&lt;p&gt;Nowhere is any of this more prevalent than in current day social media. Everyone is compulsively posting every detail of their lives to platforms owned by vastly wealthy corporations which gather it all and store it for various reasons, non of which are of any benefit to the poster. It may not be readily apparent how giving every detail of your life away could harm you, but you can never know how it will be detrimental to you in the future. Any of you familiar with Cambridge Analytica and Facebook data scandal? This was only possible because Facebook had nigh-infinite access to its users&amp;rsquo; data.&lt;/p&gt;
&lt;p&gt;Another point I&amp;rsquo;d like to bring up is that these websites are a fucking cesspool of self-propagating ideologies (most likely implanted by its owners in an effort to direct society&amp;rsquo;s behavior in whatever manner they deem more profitable, but I digress) they are a modern day &lt;a href=&#34;https://en.wikipedia.org/wiki/Operant_conditioning_chamber&#34;&gt;Skinner box&lt;/a&gt;. Social consensus becomes so important that critical thinking is completely discarded in favour of &amp;ldquo;likes&amp;rdquo; and &amp;ldquo;upvotes&amp;rdquo; or whatever they are called these days. Getting upvotes in your pictures or comments is the ultimate goal and therefore your entire time is spent adapting to whatever it is the person who gets most upvotes does. And all of this to what end? Social validation seems the most likely answer, very pathetic in my opinion; not to mention devoid of any intrinsic value or meaning. Simply put herd mentality at its finest.&lt;/p&gt;
&lt;p&gt;It actually comes as no suprise when one finds out high executives for the major social media sites do not allow their family members to participate in them. They are at the top and are seeing the damage these things can do to the human brain.&lt;/p&gt;
&lt;p&gt;Hopefully in the near future more people will realise this as well and abandon social media entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://knowledge.wharton.upenn.edu/article/fallout-cambridge-analytica/&#34;&gt;Cambridge Analytica scandal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.simplypsychology.org/operant-conditioning.html&#34;&gt;Operant Conditioning (skinner box)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.foxnews.com/tech/former-facebook-exec-wont-let-own-kids-use-social-media-says-its-destroying-how-society-works&#34;&gt;Facebook exec won&amp;rsquo;t allow his kids on Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Cage Rattling Thoughts on Software</title>
		<link>http://efym.net/blog/cage-rattling-thoughts-on-software/</link>
		<pubDate>Fri, 04 Sep 2020 09:52:25 +0100</pubDate>
		
		<guid>http://efym.net/blog/cage-rattling-thoughts-on-software/</guid>
		<description>&lt;p&gt;Quick and dirty ramblings about free software and the other, stupid and harmful type.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Important definitions you should read and be acquainted with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Free_Software_Definition&#34;&gt;Free Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Proprietary_software&#34;&gt;Proprietary Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why do we use software? Or better yet, why do we use computers in general? For most people the answer to this general question would be something along the lines of &amp;ldquo;because they help me accomplish X&amp;rdquo; and without a nuanced analysis that&amp;rsquo;s a fine answer. But what happens when those computers and that software violate basic human right such as privacy and liberty? And even in practicality it actively tries to work against you or force things you don&amp;rsquo;t want or need down your throat.&lt;/p&gt;
&lt;p&gt;Why does everyone put up with this crap? Why won&amp;rsquo;t people take a second to listen? It seems to me that the answer is a mixture of convenience, complacency and percieved social status. Everyone knows any laptop other than a Macbook is slow and you just &lt;strong&gt;need&lt;/strong&gt; an iPhone because you &lt;strong&gt;need&lt;/strong&gt; blue bubbles when texting, even if they run you for a thousand dollars and give Apple access to literally everything you do on their devices. I am obviously being sarcastic and that last sentence only refers to Apple, but the same principle applies to every software or ecosystem which is proprietary and tries to lock you into using their brand and nothing else.&lt;/p&gt;
&lt;p&gt;But how does all of this happen? From a slightly more technical standpoint, is there anything we can do? Alas, yes there is.&lt;/p&gt;
&lt;h2 id=&#34;start-using-free-software&#34;&gt;Start using Free Software!&lt;/h2&gt;
&lt;p&gt;It is important to understand that in this context &amp;ldquo;free&amp;rdquo; doesn&amp;rsquo;t refer to price, it refers to freedom. &amp;ldquo;Free as in free-speech, not as in free beer&amp;rdquo; is a common quote used to explain it. Free software is best described by its champion &lt;a href=&#34;https://stallman.org&#34;&gt;Richard Stallman&lt;/a&gt; and the &lt;a href=&#34;https://fsf.org&#34;&gt;Free Software Foundation&lt;/a&gt; (links provided at the bottom of this page) but in extreme brevity it refers to software whose source code is available and freely distributable, hence it can be analyzed and changed by anyone who cares to make sure it isn&amp;rsquo;t doing anything nefarious or infact, isn&amp;rsquo;t doing anything which isn&amp;rsquo;t exactly what you want it to do.&lt;/p&gt;
&lt;p&gt;Ideally everyone in the world should exclusively use free software. I will never stop advocating for it and though I won&amp;rsquo;t pressume to be able to persuade the general public into changing their habits, I am proud to say I have changed the mind of a couple people in my personal life—including my partner—to replace the propietary garbage they once used with free alternatives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;https://www.gnu.org/philosophy/free-sw.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/proprietary/&#34;&gt;https://www.gnu.org/proprietary/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/philosophy/free-software-even-more-important.en.html&#34;&gt;https://www.gnu.org/philosophy/free-software-even-more-important.en.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Nighttime Backups</title>
		<link>http://efym.net/blog/nighttime-backups/</link>
		<pubDate>Mon, 24 Aug 2020 14:10:20 +0100</pubDate>
		
		<guid>http://efym.net/blog/nighttime-backups/</guid>
		<description>&lt;p&gt;The system I use to backup config files from all my boxes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When you&amp;rsquo;re like me and try to self-host as many of the services you use as humanly possible, having a reliable backup system is imperative. I have already lost my configs more times than I&amp;rsquo;d care to admit so I wrote a couple scripts to automate the process.&lt;/p&gt;
&lt;p&gt;I run a server in my house which acts as a NAS and a central location to automate various things including backups. From there I run a cronjob which iterates through every single one of my boxes, mounts them on this central server through sshfs and backs up every config file and directory before uploading them to &lt;a href=&#34;https://backblaze.com&#34;&gt;Backblaze.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;borgbackup+rclone is the best combination I&amp;rsquo;ve found to create encrypted backups and upload them to object storage like Backblaze B2.&lt;/p&gt;
&lt;p&gt;Before showing you the script I run as a cronjob, let&amp;rsquo;s take a look at another one which takes the name of any (but only one) of your boxes and backs it up individually. I&amp;rsquo;ll be the first one to admit the code inside the case statement is a little janky and repetitive, but it works just fine; feel free to email me suggestions.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

if [ &amp;#34;$#&amp;#34; -ne 1 ]; then
    echo &amp;#34;specify a box, and one at a time&amp;#34;
    exit 1
fi

selected_box=$1
case $selected_box in
	&amp;#34;[CENTRAL BOX]&amp;#34;) box=[CENTRAL BOX] &amp;amp;&amp;amp;\
		mountpoint -q /mnt/boxes/$box || mount --bind / /mnt/boxes/$box &amp;amp;&amp;amp;\
		export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/[CENTRAL BOX]_key&amp;#34; ;;
	&amp;#34;[ROUTER]&amp;#34;) box=[ROUTER] &amp;amp;&amp;amp;\
		mountpoint -q /mnt/boxes/$box || sshfs root@$box:/ /mnt/boxes/$box &amp;amp;&amp;amp;\
		export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/[ROUTER]_key&amp;#34; ;;
	&amp;#34;[BOX 1]&amp;#34;) box=[BOX 1] &amp;amp;&amp;amp;\
		mountpoint -q /mnt/boxes/$box || sshfs root@$box:/ /mnt/boxes/$box &amp;amp;&amp;amp;\
		export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/[BOX 1]_key&amp;#34; ;;
	&amp;#34;[LAPTOP]&amp;#34;) box=[LAPTOP] &amp;amp;&amp;amp;\
		mountpoint -q /mnt/boxes/$box || sshfs root@$box:/ /mnt/boxes/$box &amp;amp;&amp;amp;\
		export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/[LAPTOP]_key&amp;#34; ;;
	&amp;#34;[VPS 1]&amp;#34;) box=[VPS 1] &amp;amp;&amp;amp;\
		mountpoint -q /mnt/boxes/$box || sshfs root@$box:/ /mnt/boxes/$box &amp;amp;&amp;amp;\
		export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/[VPS 1]_key&amp;#34; ;;
	*	) echo &amp;#34;box not valid&amp;#34; &amp;amp;&amp;amp; exit 1 ;;
esac

if mountpoint -q /mnt/boxes/$box; then
	borg create -v --stats -p \
	root@[CENTRAL BOX]:/path/to/backups/$box::$(date +%Y-%m-%d_t_%H-%M) \
		/path/to/dir1 \
		/path/to/dir2 \
		/path/to/dir3 \
		--exclude /path/of/excluded/dir1 \
		--exclude /path/of/excluded/dir2 \

	borg prune -v --list root@[CENTRAL BOX]:/path/to/backups/$box \
		--keep-daily=2 \
		--keep-weekly=3 \
		--keep-monthly=5

	umount /mnt/boxes/$box
fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One thing worth noting is that I keep the borg repokeys in files at &lt;code&gt;/etc/borg_keys&lt;/code&gt; which allows me to set &lt;code&gt;BORG_PASSCOMMAND&lt;/code&gt; as the output of each file in order to not have to input the password which is crucial for it to run as a cronjob&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please make absolutely sure for these files to be owned by root and have 400 ugo permissions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;now-for-what-is-actually-in-my-crontab&#34;&gt;Now for what is actually in my crontab:&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

# bail if not [CENTRAL BOX]
if [[ &amp;#34;$(uname -n)&amp;#34; != &amp;#34;[CENTRAL BOX]&amp;#34; ]]; then
  echo &amp;#34;run from [CENTRAL BOX]&amp;#34;
  exit
fi
# bail if not running as root
if [ &amp;#34;$EUID&amp;#34; -ne 0 ]; then
  echo &amp;#34;run as root&amp;#34;
  exit
fi
# bail if borg is already running, maybe previous run didn&amp;#39;t finish
if pidof -x borg &amp;gt;/dev/null; then
    echo &amp;#34;backup already running&amp;#34;
    exit
fi

for box in [CENTRAL BOX] [ROUTER] [BOX 1] [LAPTOP] [VPS 1]; do
	echo &amp;#34;################################################&amp;#34;
	echo &amp;#34;################ now doing $box ################&amp;#34;
	echo &amp;#34;################################################&amp;#34;
	if [[ &amp;#34;$box&amp;#34; == &amp;#34;[CENTRAL BOX]&amp;#34; ]]; then
		mountpoint -q /mnt/boxes/$box || mount --bind / /mnt/boxes/[CENTRAL BOX]
	else
		mountpoint -q /mnt/boxes/$box || sshfs root@$box:/ /mnt/boxes/$box
	fi
	if ! mountpoint -q /mnt/boxes/$box; then 
		echo &amp;#34;couldn&amp;#39;t mount $box&amp;#34;
	fi
	export BORG_PASSCOMMAND=&amp;#34;cat /etc/borg_keys/${box}_key&amp;#34;
	if mountpoint -q /mnt/boxes/$box; then
		borg create -v --stats \
			root@[CENTRAL BOX]:/mnt/drives/oasis/backups/$box::$(date +%Y-%m-%d_t_%H-%M) \
			/mnt/boxes/$box/etc \
			/mnt/boxes/$box/var/www \
			/mnt/boxes/$box/var/lib \
			/mnt/boxes/$box/repos \
			--exclude /mnt/boxes/$box/var/lib/dpkg \
			--exclude /mnt/boxes/$box/var/lib/libvirt \
			--exclude /mnt/boxes/$box/var/lib/apt \

		borg prune -v --list root@[CENTRAL BOX]:/mnt/drives/oasis/backups/$box \
			--keep-daily=2 \
			--keep-weekly=3 \
			--keep-monthly=5

		umount /mnt/boxes/$box
	fi
done

export RCLONE_CONFIG_PASS=$(cat /etc/borg_keys/rclone)

rclone -v sync /mnt/drives/oasis/backups backblaze:tw1zr-backups
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here I added a couple killswitches at the beginning to make sure borg and rclone don&amp;rsquo;t run at the same time, also to prevent 2 instances of the same script interfering with eachother.&lt;/p&gt;
&lt;p&gt;As you may have realised these scripts require for you to define the boxes which will be backed up and also the way I wrote them assumes these boxes are configured in the ssh config file and set up with public key authentication. It is also assumed that the borg repositories are already in place and rclone has been configured with an encrypted config file, which in my case also resides at &lt;code&gt;/etc/borg_keys&lt;/code&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Hosting Infrastructure</title>
		<link>http://efym.net/blog/hosting-infrastructure/</link>
		<pubDate>Sat, 22 Aug 2020 10:26:54 +0100</pubDate>
		
		<guid>http://efym.net/blog/hosting-infrastructure/</guid>
		<description>&lt;p&gt;Trying to move into a server that gives better control over VPS boxes while retaining the privacy given by no-account, no signup and crypto payed deployments.&lt;/p&gt;
&lt;hr&gt;
&lt;p class=&#34;date&#34;&gt;August 31, 2020&lt;/p&gt;
&lt;h2 style=&#34;color: #a23333; text-decoration: none; margin-top:0; text-shadow: 1px 1px #000;&#34;&gt;Update:&lt;/h2&gt;
All of my services have succesfully been migrated to &lt;a href=&#34;https://1984hosting.com&#34;&gt;1984hosting&lt;/a&gt;&#39;s infrastructure in Iceland, no issues of significance were had and the only downtime experienced was the expected time it takes for DNS records to update and propagate throughout the internet. After a couple days of fairly heavy usage I&#39;m quite content with performance for the tests I have performed, I&#39;d still like to test the I/O a little further with heavier databases but I don&#39;t think it&#39;ll be much of a problem.

&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This is a shill-free zone. I have NOT been paid a cent to advertise any service/company being discussed here nor do I want to or would accept it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the longest time I&amp;rsquo;ve been using &lt;a href=&#34;https://sporestack.com&#34;&gt;Sporestack&lt;/a&gt; to host my services and website. Now, &lt;a href=&#34;https://sporestack.com&#34;&gt;Sporestack&lt;/a&gt; isn&amp;rsquo;t perfect at all, it uses various bad-actor services as infrastructure, especially DigitalOcean. The good thing about it is that you do not need to register any accounts and all payment is done in crypto, their API is also pretty sweet and can be used through the &lt;strong&gt;sporestack&lt;/strong&gt; pip package directly from the CLI (right up my alley).&lt;br&gt;
The drawbacks are obvious though, you can&amp;rsquo;t control where boxes will be hosted and you don&amp;rsquo;t &amp;ldquo;own&amp;rdquo; them, merely using an API which acts as a reseller; you can&amp;rsquo;t externally monitor bandwidth usage or anything else which would require physical access to the hypervisor, not to mention the price is a bit steep. I still quite like &lt;a href=&#34;https://sporestack.com&#34;&gt;Sporestack&lt;/a&gt; though and for intentionally short lived boxes I think it&amp;rsquo;s perfect. But recently I started looking for alternatives with more control and flexibilitiy over spun up boxes.&lt;/p&gt;
&lt;h2 id=&#34;here-are-some-of-the-criteria-i-considered&#34;&gt;Here are some of the criteria I considered:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Amount of Personal information requiered&lt;/li&gt;
&lt;li&gt;Cryptocurrencies for payment (Monero preferably)&lt;/li&gt;
&lt;li&gt;Privately owned (with no investors or ad campaigns)&lt;/li&gt;
&lt;li&gt;Country of jurisdiction&lt;/li&gt;
&lt;li&gt;GDPR compliance (at least)&lt;/li&gt;
&lt;li&gt;Price (least important although not negligible)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having these requirements, the big 3 hosting companies (being DigitalOcean, Vultr and Linode) are a no-go.&lt;br&gt;
All three would straight up ask for full name, phone number, full address and even though cryptos are acceptable as payment in some instances, you would first have to fund the account with a credit card or Paypal; hilariously invasive. Linode even goes as far as to ask for a picture of valid ID, I almost spill the whisky I was sipping when I read that email. Disgusting.&lt;/p&gt;
&lt;p&gt;Since I use &lt;a href=&#34;https://njal.la&#34;&gt;Njalla&lt;/a&gt; as a domain registrar I obviously considered them to host my boxes seeing as they also provide that service, but port 25 is kept blocked in their instances, to eliminate spam originating from their servers presumably, but I host my own email server so outbound port 25 is a personal requirement of mine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Having used them for over 2 years I highly recommend &lt;a href=&#34;https://njal.la&#34;&gt;Njalla&lt;/a&gt; as a registrar, and if you don&amp;rsquo;t self host email and instead use something like &lt;a href=&#34;https://migadu.com&#34;&gt;Migadu&lt;/a&gt; then their VPS boxes are perfectly fine as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During my research I didn&amp;rsquo;t come accross many companies which met even the first criteria (No personal info requiered for signing up and deployment). In fact, I almost gave up and was about to keep using &lt;a href=&#34;https://sporestack.com&#34;&gt;Sporestack&lt;/a&gt; for the foreseeable future until I stumbled across this:&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://1984hosting.com&#34;&gt;1984hosting&lt;/a&gt;&lt;/strong&gt; requires zero personally identifiable information in order to sign up, phone number is optional and only in case you need tech support, which we don&amp;rsquo;t; is privately owned and the owner is actively involved in free speech rights campaigns. The country in which its datacenters reside is Iceland: arguably the best jurisdiction on the planet regarding privacy and free speech laws. Okay, this is epic.&lt;br&gt;
Even the price is excellent, comparable with bigger and much better funded solutions. Bitcoin is also accepted as a form of payment, Monero would be perfect but I can settle for using &lt;a href=&#34;https://xmr.to&#34;&gt;xmr.to&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://efym.net/hosting-infrastructure/1.png&#34; alt=&#34;&#34;&gt; picture from their website&lt;/p&gt;
&lt;p&gt;As it stands today most everything I host for myself (not work related) is still in &lt;a href=&#34;https://sporestack.com&#34;&gt;Sporestack&lt;/a&gt; but over the next couple weeks I&amp;rsquo;ll be migrating everything over to &lt;a href=&#34;https://1984hosting.com&#34;&gt;1984hosting&lt;/a&gt; and will update this post with results.&lt;/p&gt;
</description>
	</item>
	
	</channel>
</rss>
